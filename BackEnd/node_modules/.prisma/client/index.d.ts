
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Committee
 * 
 */
export type Committee = $Result.DefaultSelection<Prisma.$CommitteePayload>
/**
 * Model Country
 * 
 */
export type Country = $Result.DefaultSelection<Prisma.$CountryPayload>
/**
 * Model Profile
 * 
 */
export type Profile = $Result.DefaultSelection<Prisma.$ProfilePayload>
/**
 * Model Motion
 * 
 */
export type Motion = $Result.DefaultSelection<Prisma.$MotionPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Role: {
  user: 'user',
  admin: 'admin',
  viewer: 'viewer'
};

export type Role = (typeof Role)[keyof typeof Role]


export const MotionType: {
  open_moderated_caucus: 'open_moderated_caucus',
  open_unmoderated_caucus: 'open_unmoderated_caucus',
  extend_moderated_caucus: 'extend_moderated_caucus',
  extend_unmoderated_caucus: 'extend_unmoderated_caucus',
  open_debate: 'open_debate',
  close_debate: 'close_debate',
  order_draft_resolutions: 'order_draft_resolutions',
  primary_speakers_list: 'primary_speakers_list',
  secondary_speakers_list: 'secondary_speakers_list'
};

export type MotionType = (typeof MotionType)[keyof typeof MotionType]

}

export type Role = $Enums.Role

export const Role: typeof $Enums.Role

export type MotionType = $Enums.MotionType

export const MotionType: typeof $Enums.MotionType

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.committee`: Exposes CRUD operations for the **Committee** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Committees
    * const committees = await prisma.committee.findMany()
    * ```
    */
  get committee(): Prisma.CommitteeDelegate<ExtArgs>;

  /**
   * `prisma.country`: Exposes CRUD operations for the **Country** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Countries
    * const countries = await prisma.country.findMany()
    * ```
    */
  get country(): Prisma.CountryDelegate<ExtArgs>;

  /**
   * `prisma.profile`: Exposes CRUD operations for the **Profile** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Profiles
    * const profiles = await prisma.profile.findMany()
    * ```
    */
  get profile(): Prisma.ProfileDelegate<ExtArgs>;

  /**
   * `prisma.motion`: Exposes CRUD operations for the **Motion** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Motions
    * const motions = await prisma.motion.findMany()
    * ```
    */
  get motion(): Prisma.MotionDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.18.0
   * Query Engine version: 4c784e32044a8a016d99474bd02a3b6123742169
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Committee: 'Committee',
    Country: 'Country',
    Profile: 'Profile',
    Motion: 'Motion'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "committee" | "country" | "profile" | "motion"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Committee: {
        payload: Prisma.$CommitteePayload<ExtArgs>
        fields: Prisma.CommitteeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CommitteeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommitteePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CommitteeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommitteePayload>
          }
          findFirst: {
            args: Prisma.CommitteeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommitteePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CommitteeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommitteePayload>
          }
          findMany: {
            args: Prisma.CommitteeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommitteePayload>[]
          }
          create: {
            args: Prisma.CommitteeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommitteePayload>
          }
          createMany: {
            args: Prisma.CommitteeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CommitteeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommitteePayload>[]
          }
          delete: {
            args: Prisma.CommitteeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommitteePayload>
          }
          update: {
            args: Prisma.CommitteeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommitteePayload>
          }
          deleteMany: {
            args: Prisma.CommitteeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CommitteeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CommitteeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommitteePayload>
          }
          aggregate: {
            args: Prisma.CommitteeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCommittee>
          }
          groupBy: {
            args: Prisma.CommitteeGroupByArgs<ExtArgs>
            result: $Utils.Optional<CommitteeGroupByOutputType>[]
          }
          count: {
            args: Prisma.CommitteeCountArgs<ExtArgs>
            result: $Utils.Optional<CommitteeCountAggregateOutputType> | number
          }
        }
      }
      Country: {
        payload: Prisma.$CountryPayload<ExtArgs>
        fields: Prisma.CountryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CountryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CountryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CountryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CountryPayload>
          }
          findFirst: {
            args: Prisma.CountryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CountryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CountryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CountryPayload>
          }
          findMany: {
            args: Prisma.CountryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CountryPayload>[]
          }
          create: {
            args: Prisma.CountryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CountryPayload>
          }
          createMany: {
            args: Prisma.CountryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CountryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CountryPayload>[]
          }
          delete: {
            args: Prisma.CountryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CountryPayload>
          }
          update: {
            args: Prisma.CountryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CountryPayload>
          }
          deleteMany: {
            args: Prisma.CountryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CountryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CountryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CountryPayload>
          }
          aggregate: {
            args: Prisma.CountryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCountry>
          }
          groupBy: {
            args: Prisma.CountryGroupByArgs<ExtArgs>
            result: $Utils.Optional<CountryGroupByOutputType>[]
          }
          count: {
            args: Prisma.CountryCountArgs<ExtArgs>
            result: $Utils.Optional<CountryCountAggregateOutputType> | number
          }
        }
      }
      Profile: {
        payload: Prisma.$ProfilePayload<ExtArgs>
        fields: Prisma.ProfileFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProfileFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProfileFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>
          }
          findFirst: {
            args: Prisma.ProfileFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProfileFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>
          }
          findMany: {
            args: Prisma.ProfileFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>[]
          }
          create: {
            args: Prisma.ProfileCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>
          }
          createMany: {
            args: Prisma.ProfileCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProfileCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>[]
          }
          delete: {
            args: Prisma.ProfileDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>
          }
          update: {
            args: Prisma.ProfileUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>
          }
          deleteMany: {
            args: Prisma.ProfileDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProfileUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ProfileUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>
          }
          aggregate: {
            args: Prisma.ProfileAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProfile>
          }
          groupBy: {
            args: Prisma.ProfileGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProfileGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProfileCountArgs<ExtArgs>
            result: $Utils.Optional<ProfileCountAggregateOutputType> | number
          }
        }
      }
      Motion: {
        payload: Prisma.$MotionPayload<ExtArgs>
        fields: Prisma.MotionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MotionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MotionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MotionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MotionPayload>
          }
          findFirst: {
            args: Prisma.MotionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MotionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MotionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MotionPayload>
          }
          findMany: {
            args: Prisma.MotionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MotionPayload>[]
          }
          create: {
            args: Prisma.MotionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MotionPayload>
          }
          createMany: {
            args: Prisma.MotionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MotionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MotionPayload>[]
          }
          delete: {
            args: Prisma.MotionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MotionPayload>
          }
          update: {
            args: Prisma.MotionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MotionPayload>
          }
          deleteMany: {
            args: Prisma.MotionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MotionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.MotionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MotionPayload>
          }
          aggregate: {
            args: Prisma.MotionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMotion>
          }
          groupBy: {
            args: Prisma.MotionGroupByArgs<ExtArgs>
            result: $Utils.Optional<MotionGroupByOutputType>[]
          }
          count: {
            args: Prisma.MotionCountArgs<ExtArgs>
            result: $Utils.Optional<MotionCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    profiles: number
    committees: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    profiles?: boolean | UserCountOutputTypeCountProfilesArgs
    committees?: boolean | UserCountOutputTypeCountCommitteesArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountProfilesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProfileWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCommitteesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommitteeWhereInput
  }


  /**
   * Count Type CommitteeCountOutputType
   */

  export type CommitteeCountOutputType = {
    countries: number
    users: number
    profiles: number
    Motion: number
  }

  export type CommitteeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    countries?: boolean | CommitteeCountOutputTypeCountCountriesArgs
    users?: boolean | CommitteeCountOutputTypeCountUsersArgs
    profiles?: boolean | CommitteeCountOutputTypeCountProfilesArgs
    Motion?: boolean | CommitteeCountOutputTypeCountMotionArgs
  }

  // Custom InputTypes
  /**
   * CommitteeCountOutputType without action
   */
  export type CommitteeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommitteeCountOutputType
     */
    select?: CommitteeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CommitteeCountOutputType without action
   */
  export type CommitteeCountOutputTypeCountCountriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CountryWhereInput
  }

  /**
   * CommitteeCountOutputType without action
   */
  export type CommitteeCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }

  /**
   * CommitteeCountOutputType without action
   */
  export type CommitteeCountOutputTypeCountProfilesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProfileWhereInput
  }

  /**
   * CommitteeCountOutputType without action
   */
  export type CommitteeCountOutputTypeCountMotionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MotionWhereInput
  }


  /**
   * Count Type ProfileCountOutputType
   */

  export type ProfileCountOutputType = {
    Motion: number
  }

  export type ProfileCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Motion?: boolean | ProfileCountOutputTypeCountMotionArgs
  }

  // Custom InputTypes
  /**
   * ProfileCountOutputType without action
   */
  export type ProfileCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfileCountOutputType
     */
    select?: ProfileCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProfileCountOutputType without action
   */
  export type ProfileCountOutputTypeCountMotionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MotionWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    email: string | null
    password: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    email: string | null
    password: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    password: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    password?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    password?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    password?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    email: string
    password: string
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    profiles?: boolean | User$profilesArgs<ExtArgs>
    committees?: boolean | User$committeesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    password?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    profiles?: boolean | User$profilesArgs<ExtArgs>
    committees?: boolean | User$committeesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      profiles: Prisma.$ProfilePayload<ExtArgs>[]
      committees: Prisma.$CommitteePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      email: string
      password: string
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    profiles<T extends User$profilesArgs<ExtArgs> = {}>(args?: Subset<T, User$profilesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findMany"> | Null>
    committees<T extends User$committeesArgs<ExtArgs> = {}>(args?: Subset<T, User$committeesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommitteePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.profiles
   */
  export type User$profilesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    where?: ProfileWhereInput
    orderBy?: ProfileOrderByWithRelationInput | ProfileOrderByWithRelationInput[]
    cursor?: ProfileWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProfileScalarFieldEnum | ProfileScalarFieldEnum[]
  }

  /**
   * User.committees
   */
  export type User$committeesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Committee
     */
    select?: CommitteeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommitteeInclude<ExtArgs> | null
    where?: CommitteeWhereInput
    orderBy?: CommitteeOrderByWithRelationInput | CommitteeOrderByWithRelationInput[]
    cursor?: CommitteeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommitteeScalarFieldEnum | CommitteeScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Committee
   */

  export type AggregateCommittee = {
    _count: CommitteeCountAggregateOutputType | null
    _avg: CommitteeAvgAggregateOutputType | null
    _sum: CommitteeSumAggregateOutputType | null
    _min: CommitteeMinAggregateOutputType | null
    _max: CommitteeMaxAggregateOutputType | null
  }

  export type CommitteeAvgAggregateOutputType = {
    id: number | null
  }

  export type CommitteeSumAggregateOutputType = {
    id: number | null
  }

  export type CommitteeMinAggregateOutputType = {
    id: number | null
    name: string | null
    topic: string | null
    conference: string | null
    code: string | null
  }

  export type CommitteeMaxAggregateOutputType = {
    id: number | null
    name: string | null
    topic: string | null
    conference: string | null
    code: string | null
  }

  export type CommitteeCountAggregateOutputType = {
    id: number
    name: number
    topic: number
    conference: number
    code: number
    _all: number
  }


  export type CommitteeAvgAggregateInputType = {
    id?: true
  }

  export type CommitteeSumAggregateInputType = {
    id?: true
  }

  export type CommitteeMinAggregateInputType = {
    id?: true
    name?: true
    topic?: true
    conference?: true
    code?: true
  }

  export type CommitteeMaxAggregateInputType = {
    id?: true
    name?: true
    topic?: true
    conference?: true
    code?: true
  }

  export type CommitteeCountAggregateInputType = {
    id?: true
    name?: true
    topic?: true
    conference?: true
    code?: true
    _all?: true
  }

  export type CommitteeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Committee to aggregate.
     */
    where?: CommitteeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Committees to fetch.
     */
    orderBy?: CommitteeOrderByWithRelationInput | CommitteeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CommitteeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Committees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Committees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Committees
    **/
    _count?: true | CommitteeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CommitteeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CommitteeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CommitteeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CommitteeMaxAggregateInputType
  }

  export type GetCommitteeAggregateType<T extends CommitteeAggregateArgs> = {
        [P in keyof T & keyof AggregateCommittee]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCommittee[P]>
      : GetScalarType<T[P], AggregateCommittee[P]>
  }




  export type CommitteeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommitteeWhereInput
    orderBy?: CommitteeOrderByWithAggregationInput | CommitteeOrderByWithAggregationInput[]
    by: CommitteeScalarFieldEnum[] | CommitteeScalarFieldEnum
    having?: CommitteeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CommitteeCountAggregateInputType | true
    _avg?: CommitteeAvgAggregateInputType
    _sum?: CommitteeSumAggregateInputType
    _min?: CommitteeMinAggregateInputType
    _max?: CommitteeMaxAggregateInputType
  }

  export type CommitteeGroupByOutputType = {
    id: number
    name: string
    topic: string | null
    conference: string | null
    code: string
    _count: CommitteeCountAggregateOutputType | null
    _avg: CommitteeAvgAggregateOutputType | null
    _sum: CommitteeSumAggregateOutputType | null
    _min: CommitteeMinAggregateOutputType | null
    _max: CommitteeMaxAggregateOutputType | null
  }

  type GetCommitteeGroupByPayload<T extends CommitteeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CommitteeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CommitteeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CommitteeGroupByOutputType[P]>
            : GetScalarType<T[P], CommitteeGroupByOutputType[P]>
        }
      >
    >


  export type CommitteeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    topic?: boolean
    conference?: boolean
    code?: boolean
    countries?: boolean | Committee$countriesArgs<ExtArgs>
    users?: boolean | Committee$usersArgs<ExtArgs>
    profiles?: boolean | Committee$profilesArgs<ExtArgs>
    Motion?: boolean | Committee$MotionArgs<ExtArgs>
    _count?: boolean | CommitteeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["committee"]>

  export type CommitteeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    topic?: boolean
    conference?: boolean
    code?: boolean
  }, ExtArgs["result"]["committee"]>

  export type CommitteeSelectScalar = {
    id?: boolean
    name?: boolean
    topic?: boolean
    conference?: boolean
    code?: boolean
  }

  export type CommitteeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    countries?: boolean | Committee$countriesArgs<ExtArgs>
    users?: boolean | Committee$usersArgs<ExtArgs>
    profiles?: boolean | Committee$profilesArgs<ExtArgs>
    Motion?: boolean | Committee$MotionArgs<ExtArgs>
    _count?: boolean | CommitteeCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CommitteeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $CommitteePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Committee"
    objects: {
      countries: Prisma.$CountryPayload<ExtArgs>[]
      users: Prisma.$UserPayload<ExtArgs>[]
      profiles: Prisma.$ProfilePayload<ExtArgs>[]
      Motion: Prisma.$MotionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      topic: string | null
      conference: string | null
      code: string
    }, ExtArgs["result"]["committee"]>
    composites: {}
  }

  type CommitteeGetPayload<S extends boolean | null | undefined | CommitteeDefaultArgs> = $Result.GetResult<Prisma.$CommitteePayload, S>

  type CommitteeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CommitteeFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CommitteeCountAggregateInputType | true
    }

  export interface CommitteeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Committee'], meta: { name: 'Committee' } }
    /**
     * Find zero or one Committee that matches the filter.
     * @param {CommitteeFindUniqueArgs} args - Arguments to find a Committee
     * @example
     * // Get one Committee
     * const committee = await prisma.committee.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CommitteeFindUniqueArgs>(args: SelectSubset<T, CommitteeFindUniqueArgs<ExtArgs>>): Prisma__CommitteeClient<$Result.GetResult<Prisma.$CommitteePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Committee that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CommitteeFindUniqueOrThrowArgs} args - Arguments to find a Committee
     * @example
     * // Get one Committee
     * const committee = await prisma.committee.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CommitteeFindUniqueOrThrowArgs>(args: SelectSubset<T, CommitteeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CommitteeClient<$Result.GetResult<Prisma.$CommitteePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Committee that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommitteeFindFirstArgs} args - Arguments to find a Committee
     * @example
     * // Get one Committee
     * const committee = await prisma.committee.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CommitteeFindFirstArgs>(args?: SelectSubset<T, CommitteeFindFirstArgs<ExtArgs>>): Prisma__CommitteeClient<$Result.GetResult<Prisma.$CommitteePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Committee that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommitteeFindFirstOrThrowArgs} args - Arguments to find a Committee
     * @example
     * // Get one Committee
     * const committee = await prisma.committee.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CommitteeFindFirstOrThrowArgs>(args?: SelectSubset<T, CommitteeFindFirstOrThrowArgs<ExtArgs>>): Prisma__CommitteeClient<$Result.GetResult<Prisma.$CommitteePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Committees that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommitteeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Committees
     * const committees = await prisma.committee.findMany()
     * 
     * // Get first 10 Committees
     * const committees = await prisma.committee.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const committeeWithIdOnly = await prisma.committee.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CommitteeFindManyArgs>(args?: SelectSubset<T, CommitteeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommitteePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Committee.
     * @param {CommitteeCreateArgs} args - Arguments to create a Committee.
     * @example
     * // Create one Committee
     * const Committee = await prisma.committee.create({
     *   data: {
     *     // ... data to create a Committee
     *   }
     * })
     * 
     */
    create<T extends CommitteeCreateArgs>(args: SelectSubset<T, CommitteeCreateArgs<ExtArgs>>): Prisma__CommitteeClient<$Result.GetResult<Prisma.$CommitteePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Committees.
     * @param {CommitteeCreateManyArgs} args - Arguments to create many Committees.
     * @example
     * // Create many Committees
     * const committee = await prisma.committee.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CommitteeCreateManyArgs>(args?: SelectSubset<T, CommitteeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Committees and returns the data saved in the database.
     * @param {CommitteeCreateManyAndReturnArgs} args - Arguments to create many Committees.
     * @example
     * // Create many Committees
     * const committee = await prisma.committee.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Committees and only return the `id`
     * const committeeWithIdOnly = await prisma.committee.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CommitteeCreateManyAndReturnArgs>(args?: SelectSubset<T, CommitteeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommitteePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Committee.
     * @param {CommitteeDeleteArgs} args - Arguments to delete one Committee.
     * @example
     * // Delete one Committee
     * const Committee = await prisma.committee.delete({
     *   where: {
     *     // ... filter to delete one Committee
     *   }
     * })
     * 
     */
    delete<T extends CommitteeDeleteArgs>(args: SelectSubset<T, CommitteeDeleteArgs<ExtArgs>>): Prisma__CommitteeClient<$Result.GetResult<Prisma.$CommitteePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Committee.
     * @param {CommitteeUpdateArgs} args - Arguments to update one Committee.
     * @example
     * // Update one Committee
     * const committee = await prisma.committee.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CommitteeUpdateArgs>(args: SelectSubset<T, CommitteeUpdateArgs<ExtArgs>>): Prisma__CommitteeClient<$Result.GetResult<Prisma.$CommitteePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Committees.
     * @param {CommitteeDeleteManyArgs} args - Arguments to filter Committees to delete.
     * @example
     * // Delete a few Committees
     * const { count } = await prisma.committee.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CommitteeDeleteManyArgs>(args?: SelectSubset<T, CommitteeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Committees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommitteeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Committees
     * const committee = await prisma.committee.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CommitteeUpdateManyArgs>(args: SelectSubset<T, CommitteeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Committee.
     * @param {CommitteeUpsertArgs} args - Arguments to update or create a Committee.
     * @example
     * // Update or create a Committee
     * const committee = await prisma.committee.upsert({
     *   create: {
     *     // ... data to create a Committee
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Committee we want to update
     *   }
     * })
     */
    upsert<T extends CommitteeUpsertArgs>(args: SelectSubset<T, CommitteeUpsertArgs<ExtArgs>>): Prisma__CommitteeClient<$Result.GetResult<Prisma.$CommitteePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Committees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommitteeCountArgs} args - Arguments to filter Committees to count.
     * @example
     * // Count the number of Committees
     * const count = await prisma.committee.count({
     *   where: {
     *     // ... the filter for the Committees we want to count
     *   }
     * })
    **/
    count<T extends CommitteeCountArgs>(
      args?: Subset<T, CommitteeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CommitteeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Committee.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommitteeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CommitteeAggregateArgs>(args: Subset<T, CommitteeAggregateArgs>): Prisma.PrismaPromise<GetCommitteeAggregateType<T>>

    /**
     * Group by Committee.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommitteeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CommitteeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CommitteeGroupByArgs['orderBy'] }
        : { orderBy?: CommitteeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CommitteeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCommitteeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Committee model
   */
  readonly fields: CommitteeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Committee.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CommitteeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    countries<T extends Committee$countriesArgs<ExtArgs> = {}>(args?: Subset<T, Committee$countriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CountryPayload<ExtArgs>, T, "findMany"> | Null>
    users<T extends Committee$usersArgs<ExtArgs> = {}>(args?: Subset<T, Committee$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany"> | Null>
    profiles<T extends Committee$profilesArgs<ExtArgs> = {}>(args?: Subset<T, Committee$profilesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findMany"> | Null>
    Motion<T extends Committee$MotionArgs<ExtArgs> = {}>(args?: Subset<T, Committee$MotionArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MotionPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Committee model
   */ 
  interface CommitteeFieldRefs {
    readonly id: FieldRef<"Committee", 'Int'>
    readonly name: FieldRef<"Committee", 'String'>
    readonly topic: FieldRef<"Committee", 'String'>
    readonly conference: FieldRef<"Committee", 'String'>
    readonly code: FieldRef<"Committee", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Committee findUnique
   */
  export type CommitteeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Committee
     */
    select?: CommitteeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommitteeInclude<ExtArgs> | null
    /**
     * Filter, which Committee to fetch.
     */
    where: CommitteeWhereUniqueInput
  }

  /**
   * Committee findUniqueOrThrow
   */
  export type CommitteeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Committee
     */
    select?: CommitteeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommitteeInclude<ExtArgs> | null
    /**
     * Filter, which Committee to fetch.
     */
    where: CommitteeWhereUniqueInput
  }

  /**
   * Committee findFirst
   */
  export type CommitteeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Committee
     */
    select?: CommitteeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommitteeInclude<ExtArgs> | null
    /**
     * Filter, which Committee to fetch.
     */
    where?: CommitteeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Committees to fetch.
     */
    orderBy?: CommitteeOrderByWithRelationInput | CommitteeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Committees.
     */
    cursor?: CommitteeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Committees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Committees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Committees.
     */
    distinct?: CommitteeScalarFieldEnum | CommitteeScalarFieldEnum[]
  }

  /**
   * Committee findFirstOrThrow
   */
  export type CommitteeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Committee
     */
    select?: CommitteeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommitteeInclude<ExtArgs> | null
    /**
     * Filter, which Committee to fetch.
     */
    where?: CommitteeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Committees to fetch.
     */
    orderBy?: CommitteeOrderByWithRelationInput | CommitteeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Committees.
     */
    cursor?: CommitteeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Committees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Committees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Committees.
     */
    distinct?: CommitteeScalarFieldEnum | CommitteeScalarFieldEnum[]
  }

  /**
   * Committee findMany
   */
  export type CommitteeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Committee
     */
    select?: CommitteeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommitteeInclude<ExtArgs> | null
    /**
     * Filter, which Committees to fetch.
     */
    where?: CommitteeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Committees to fetch.
     */
    orderBy?: CommitteeOrderByWithRelationInput | CommitteeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Committees.
     */
    cursor?: CommitteeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Committees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Committees.
     */
    skip?: number
    distinct?: CommitteeScalarFieldEnum | CommitteeScalarFieldEnum[]
  }

  /**
   * Committee create
   */
  export type CommitteeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Committee
     */
    select?: CommitteeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommitteeInclude<ExtArgs> | null
    /**
     * The data needed to create a Committee.
     */
    data: XOR<CommitteeCreateInput, CommitteeUncheckedCreateInput>
  }

  /**
   * Committee createMany
   */
  export type CommitteeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Committees.
     */
    data: CommitteeCreateManyInput | CommitteeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Committee createManyAndReturn
   */
  export type CommitteeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Committee
     */
    select?: CommitteeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Committees.
     */
    data: CommitteeCreateManyInput | CommitteeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Committee update
   */
  export type CommitteeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Committee
     */
    select?: CommitteeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommitteeInclude<ExtArgs> | null
    /**
     * The data needed to update a Committee.
     */
    data: XOR<CommitteeUpdateInput, CommitteeUncheckedUpdateInput>
    /**
     * Choose, which Committee to update.
     */
    where: CommitteeWhereUniqueInput
  }

  /**
   * Committee updateMany
   */
  export type CommitteeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Committees.
     */
    data: XOR<CommitteeUpdateManyMutationInput, CommitteeUncheckedUpdateManyInput>
    /**
     * Filter which Committees to update
     */
    where?: CommitteeWhereInput
  }

  /**
   * Committee upsert
   */
  export type CommitteeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Committee
     */
    select?: CommitteeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommitteeInclude<ExtArgs> | null
    /**
     * The filter to search for the Committee to update in case it exists.
     */
    where: CommitteeWhereUniqueInput
    /**
     * In case the Committee found by the `where` argument doesn't exist, create a new Committee with this data.
     */
    create: XOR<CommitteeCreateInput, CommitteeUncheckedCreateInput>
    /**
     * In case the Committee was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CommitteeUpdateInput, CommitteeUncheckedUpdateInput>
  }

  /**
   * Committee delete
   */
  export type CommitteeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Committee
     */
    select?: CommitteeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommitteeInclude<ExtArgs> | null
    /**
     * Filter which Committee to delete.
     */
    where: CommitteeWhereUniqueInput
  }

  /**
   * Committee deleteMany
   */
  export type CommitteeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Committees to delete
     */
    where?: CommitteeWhereInput
  }

  /**
   * Committee.countries
   */
  export type Committee$countriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Country
     */
    select?: CountrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CountryInclude<ExtArgs> | null
    where?: CountryWhereInput
    orderBy?: CountryOrderByWithRelationInput | CountryOrderByWithRelationInput[]
    cursor?: CountryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CountryScalarFieldEnum | CountryScalarFieldEnum[]
  }

  /**
   * Committee.users
   */
  export type Committee$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Committee.profiles
   */
  export type Committee$profilesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    where?: ProfileWhereInput
    orderBy?: ProfileOrderByWithRelationInput | ProfileOrderByWithRelationInput[]
    cursor?: ProfileWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProfileScalarFieldEnum | ProfileScalarFieldEnum[]
  }

  /**
   * Committee.Motion
   */
  export type Committee$MotionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Motion
     */
    select?: MotionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MotionInclude<ExtArgs> | null
    where?: MotionWhereInput
    orderBy?: MotionOrderByWithRelationInput | MotionOrderByWithRelationInput[]
    cursor?: MotionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MotionScalarFieldEnum | MotionScalarFieldEnum[]
  }

  /**
   * Committee without action
   */
  export type CommitteeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Committee
     */
    select?: CommitteeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommitteeInclude<ExtArgs> | null
  }


  /**
   * Model Country
   */

  export type AggregateCountry = {
    _count: CountryCountAggregateOutputType | null
    _avg: CountryAvgAggregateOutputType | null
    _sum: CountrySumAggregateOutputType | null
    _min: CountryMinAggregateOutputType | null
    _max: CountryMaxAggregateOutputType | null
  }

  export type CountryAvgAggregateOutputType = {
    id: number | null
    committeeId: number | null
  }

  export type CountrySumAggregateOutputType = {
    id: number | null
    committeeId: number | null
  }

  export type CountryMinAggregateOutputType = {
    id: number | null
    country: string | null
    code: string | null
    committeeId: number | null
  }

  export type CountryMaxAggregateOutputType = {
    id: number | null
    country: string | null
    code: string | null
    committeeId: number | null
  }

  export type CountryCountAggregateOutputType = {
    id: number
    country: number
    code: number
    committeeId: number
    _all: number
  }


  export type CountryAvgAggregateInputType = {
    id?: true
    committeeId?: true
  }

  export type CountrySumAggregateInputType = {
    id?: true
    committeeId?: true
  }

  export type CountryMinAggregateInputType = {
    id?: true
    country?: true
    code?: true
    committeeId?: true
  }

  export type CountryMaxAggregateInputType = {
    id?: true
    country?: true
    code?: true
    committeeId?: true
  }

  export type CountryCountAggregateInputType = {
    id?: true
    country?: true
    code?: true
    committeeId?: true
    _all?: true
  }

  export type CountryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Country to aggregate.
     */
    where?: CountryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Countries to fetch.
     */
    orderBy?: CountryOrderByWithRelationInput | CountryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CountryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Countries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Countries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Countries
    **/
    _count?: true | CountryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CountryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CountrySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CountryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CountryMaxAggregateInputType
  }

  export type GetCountryAggregateType<T extends CountryAggregateArgs> = {
        [P in keyof T & keyof AggregateCountry]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCountry[P]>
      : GetScalarType<T[P], AggregateCountry[P]>
  }




  export type CountryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CountryWhereInput
    orderBy?: CountryOrderByWithAggregationInput | CountryOrderByWithAggregationInput[]
    by: CountryScalarFieldEnum[] | CountryScalarFieldEnum
    having?: CountryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CountryCountAggregateInputType | true
    _avg?: CountryAvgAggregateInputType
    _sum?: CountrySumAggregateInputType
    _min?: CountryMinAggregateInputType
    _max?: CountryMaxAggregateInputType
  }

  export type CountryGroupByOutputType = {
    id: number
    country: string
    code: string
    committeeId: number | null
    _count: CountryCountAggregateOutputType | null
    _avg: CountryAvgAggregateOutputType | null
    _sum: CountrySumAggregateOutputType | null
    _min: CountryMinAggregateOutputType | null
    _max: CountryMaxAggregateOutputType | null
  }

  type GetCountryGroupByPayload<T extends CountryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CountryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CountryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CountryGroupByOutputType[P]>
            : GetScalarType<T[P], CountryGroupByOutputType[P]>
        }
      >
    >


  export type CountrySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    country?: boolean
    code?: boolean
    committeeId?: boolean
    committee?: boolean | Country$committeeArgs<ExtArgs>
  }, ExtArgs["result"]["country"]>

  export type CountrySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    country?: boolean
    code?: boolean
    committeeId?: boolean
    committee?: boolean | Country$committeeArgs<ExtArgs>
  }, ExtArgs["result"]["country"]>

  export type CountrySelectScalar = {
    id?: boolean
    country?: boolean
    code?: boolean
    committeeId?: boolean
  }

  export type CountryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    committee?: boolean | Country$committeeArgs<ExtArgs>
  }
  export type CountryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    committee?: boolean | Country$committeeArgs<ExtArgs>
  }

  export type $CountryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Country"
    objects: {
      committee: Prisma.$CommitteePayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      country: string
      code: string
      committeeId: number | null
    }, ExtArgs["result"]["country"]>
    composites: {}
  }

  type CountryGetPayload<S extends boolean | null | undefined | CountryDefaultArgs> = $Result.GetResult<Prisma.$CountryPayload, S>

  type CountryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CountryFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CountryCountAggregateInputType | true
    }

  export interface CountryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Country'], meta: { name: 'Country' } }
    /**
     * Find zero or one Country that matches the filter.
     * @param {CountryFindUniqueArgs} args - Arguments to find a Country
     * @example
     * // Get one Country
     * const country = await prisma.country.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CountryFindUniqueArgs>(args: SelectSubset<T, CountryFindUniqueArgs<ExtArgs>>): Prisma__CountryClient<$Result.GetResult<Prisma.$CountryPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Country that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CountryFindUniqueOrThrowArgs} args - Arguments to find a Country
     * @example
     * // Get one Country
     * const country = await prisma.country.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CountryFindUniqueOrThrowArgs>(args: SelectSubset<T, CountryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CountryClient<$Result.GetResult<Prisma.$CountryPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Country that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CountryFindFirstArgs} args - Arguments to find a Country
     * @example
     * // Get one Country
     * const country = await prisma.country.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CountryFindFirstArgs>(args?: SelectSubset<T, CountryFindFirstArgs<ExtArgs>>): Prisma__CountryClient<$Result.GetResult<Prisma.$CountryPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Country that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CountryFindFirstOrThrowArgs} args - Arguments to find a Country
     * @example
     * // Get one Country
     * const country = await prisma.country.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CountryFindFirstOrThrowArgs>(args?: SelectSubset<T, CountryFindFirstOrThrowArgs<ExtArgs>>): Prisma__CountryClient<$Result.GetResult<Prisma.$CountryPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Countries that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CountryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Countries
     * const countries = await prisma.country.findMany()
     * 
     * // Get first 10 Countries
     * const countries = await prisma.country.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const countryWithIdOnly = await prisma.country.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CountryFindManyArgs>(args?: SelectSubset<T, CountryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CountryPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Country.
     * @param {CountryCreateArgs} args - Arguments to create a Country.
     * @example
     * // Create one Country
     * const Country = await prisma.country.create({
     *   data: {
     *     // ... data to create a Country
     *   }
     * })
     * 
     */
    create<T extends CountryCreateArgs>(args: SelectSubset<T, CountryCreateArgs<ExtArgs>>): Prisma__CountryClient<$Result.GetResult<Prisma.$CountryPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Countries.
     * @param {CountryCreateManyArgs} args - Arguments to create many Countries.
     * @example
     * // Create many Countries
     * const country = await prisma.country.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CountryCreateManyArgs>(args?: SelectSubset<T, CountryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Countries and returns the data saved in the database.
     * @param {CountryCreateManyAndReturnArgs} args - Arguments to create many Countries.
     * @example
     * // Create many Countries
     * const country = await prisma.country.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Countries and only return the `id`
     * const countryWithIdOnly = await prisma.country.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CountryCreateManyAndReturnArgs>(args?: SelectSubset<T, CountryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CountryPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Country.
     * @param {CountryDeleteArgs} args - Arguments to delete one Country.
     * @example
     * // Delete one Country
     * const Country = await prisma.country.delete({
     *   where: {
     *     // ... filter to delete one Country
     *   }
     * })
     * 
     */
    delete<T extends CountryDeleteArgs>(args: SelectSubset<T, CountryDeleteArgs<ExtArgs>>): Prisma__CountryClient<$Result.GetResult<Prisma.$CountryPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Country.
     * @param {CountryUpdateArgs} args - Arguments to update one Country.
     * @example
     * // Update one Country
     * const country = await prisma.country.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CountryUpdateArgs>(args: SelectSubset<T, CountryUpdateArgs<ExtArgs>>): Prisma__CountryClient<$Result.GetResult<Prisma.$CountryPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Countries.
     * @param {CountryDeleteManyArgs} args - Arguments to filter Countries to delete.
     * @example
     * // Delete a few Countries
     * const { count } = await prisma.country.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CountryDeleteManyArgs>(args?: SelectSubset<T, CountryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Countries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CountryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Countries
     * const country = await prisma.country.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CountryUpdateManyArgs>(args: SelectSubset<T, CountryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Country.
     * @param {CountryUpsertArgs} args - Arguments to update or create a Country.
     * @example
     * // Update or create a Country
     * const country = await prisma.country.upsert({
     *   create: {
     *     // ... data to create a Country
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Country we want to update
     *   }
     * })
     */
    upsert<T extends CountryUpsertArgs>(args: SelectSubset<T, CountryUpsertArgs<ExtArgs>>): Prisma__CountryClient<$Result.GetResult<Prisma.$CountryPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Countries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CountryCountArgs} args - Arguments to filter Countries to count.
     * @example
     * // Count the number of Countries
     * const count = await prisma.country.count({
     *   where: {
     *     // ... the filter for the Countries we want to count
     *   }
     * })
    **/
    count<T extends CountryCountArgs>(
      args?: Subset<T, CountryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CountryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Country.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CountryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CountryAggregateArgs>(args: Subset<T, CountryAggregateArgs>): Prisma.PrismaPromise<GetCountryAggregateType<T>>

    /**
     * Group by Country.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CountryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CountryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CountryGroupByArgs['orderBy'] }
        : { orderBy?: CountryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CountryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCountryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Country model
   */
  readonly fields: CountryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Country.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CountryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    committee<T extends Country$committeeArgs<ExtArgs> = {}>(args?: Subset<T, Country$committeeArgs<ExtArgs>>): Prisma__CommitteeClient<$Result.GetResult<Prisma.$CommitteePayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Country model
   */ 
  interface CountryFieldRefs {
    readonly id: FieldRef<"Country", 'Int'>
    readonly country: FieldRef<"Country", 'String'>
    readonly code: FieldRef<"Country", 'String'>
    readonly committeeId: FieldRef<"Country", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Country findUnique
   */
  export type CountryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Country
     */
    select?: CountrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CountryInclude<ExtArgs> | null
    /**
     * Filter, which Country to fetch.
     */
    where: CountryWhereUniqueInput
  }

  /**
   * Country findUniqueOrThrow
   */
  export type CountryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Country
     */
    select?: CountrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CountryInclude<ExtArgs> | null
    /**
     * Filter, which Country to fetch.
     */
    where: CountryWhereUniqueInput
  }

  /**
   * Country findFirst
   */
  export type CountryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Country
     */
    select?: CountrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CountryInclude<ExtArgs> | null
    /**
     * Filter, which Country to fetch.
     */
    where?: CountryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Countries to fetch.
     */
    orderBy?: CountryOrderByWithRelationInput | CountryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Countries.
     */
    cursor?: CountryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Countries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Countries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Countries.
     */
    distinct?: CountryScalarFieldEnum | CountryScalarFieldEnum[]
  }

  /**
   * Country findFirstOrThrow
   */
  export type CountryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Country
     */
    select?: CountrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CountryInclude<ExtArgs> | null
    /**
     * Filter, which Country to fetch.
     */
    where?: CountryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Countries to fetch.
     */
    orderBy?: CountryOrderByWithRelationInput | CountryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Countries.
     */
    cursor?: CountryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Countries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Countries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Countries.
     */
    distinct?: CountryScalarFieldEnum | CountryScalarFieldEnum[]
  }

  /**
   * Country findMany
   */
  export type CountryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Country
     */
    select?: CountrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CountryInclude<ExtArgs> | null
    /**
     * Filter, which Countries to fetch.
     */
    where?: CountryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Countries to fetch.
     */
    orderBy?: CountryOrderByWithRelationInput | CountryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Countries.
     */
    cursor?: CountryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Countries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Countries.
     */
    skip?: number
    distinct?: CountryScalarFieldEnum | CountryScalarFieldEnum[]
  }

  /**
   * Country create
   */
  export type CountryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Country
     */
    select?: CountrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CountryInclude<ExtArgs> | null
    /**
     * The data needed to create a Country.
     */
    data: XOR<CountryCreateInput, CountryUncheckedCreateInput>
  }

  /**
   * Country createMany
   */
  export type CountryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Countries.
     */
    data: CountryCreateManyInput | CountryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Country createManyAndReturn
   */
  export type CountryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Country
     */
    select?: CountrySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Countries.
     */
    data: CountryCreateManyInput | CountryCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CountryIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Country update
   */
  export type CountryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Country
     */
    select?: CountrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CountryInclude<ExtArgs> | null
    /**
     * The data needed to update a Country.
     */
    data: XOR<CountryUpdateInput, CountryUncheckedUpdateInput>
    /**
     * Choose, which Country to update.
     */
    where: CountryWhereUniqueInput
  }

  /**
   * Country updateMany
   */
  export type CountryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Countries.
     */
    data: XOR<CountryUpdateManyMutationInput, CountryUncheckedUpdateManyInput>
    /**
     * Filter which Countries to update
     */
    where?: CountryWhereInput
  }

  /**
   * Country upsert
   */
  export type CountryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Country
     */
    select?: CountrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CountryInclude<ExtArgs> | null
    /**
     * The filter to search for the Country to update in case it exists.
     */
    where: CountryWhereUniqueInput
    /**
     * In case the Country found by the `where` argument doesn't exist, create a new Country with this data.
     */
    create: XOR<CountryCreateInput, CountryUncheckedCreateInput>
    /**
     * In case the Country was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CountryUpdateInput, CountryUncheckedUpdateInput>
  }

  /**
   * Country delete
   */
  export type CountryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Country
     */
    select?: CountrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CountryInclude<ExtArgs> | null
    /**
     * Filter which Country to delete.
     */
    where: CountryWhereUniqueInput
  }

  /**
   * Country deleteMany
   */
  export type CountryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Countries to delete
     */
    where?: CountryWhereInput
  }

  /**
   * Country.committee
   */
  export type Country$committeeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Committee
     */
    select?: CommitteeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommitteeInclude<ExtArgs> | null
    where?: CommitteeWhereInput
  }

  /**
   * Country without action
   */
  export type CountryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Country
     */
    select?: CountrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CountryInclude<ExtArgs> | null
  }


  /**
   * Model Profile
   */

  export type AggregateProfile = {
    _count: ProfileCountAggregateOutputType | null
    _avg: ProfileAvgAggregateOutputType | null
    _sum: ProfileSumAggregateOutputType | null
    _min: ProfileMinAggregateOutputType | null
    _max: ProfileMaxAggregateOutputType | null
  }

  export type ProfileAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    committeeId: number | null
    timesSpoken: number | null
  }

  export type ProfileSumAggregateOutputType = {
    id: number | null
    userId: number | null
    committeeId: number | null
    timesSpoken: number | null
  }

  export type ProfileMinAggregateOutputType = {
    id: number | null
    role: $Enums.Role | null
    userId: number | null
    country: string | null
    countryCode: string | null
    committeeId: number | null
    workingPaper: string | null
    timesSpoken: number | null
    present: boolean | null
    voting: boolean | null
  }

  export type ProfileMaxAggregateOutputType = {
    id: number | null
    role: $Enums.Role | null
    userId: number | null
    country: string | null
    countryCode: string | null
    committeeId: number | null
    workingPaper: string | null
    timesSpoken: number | null
    present: boolean | null
    voting: boolean | null
  }

  export type ProfileCountAggregateOutputType = {
    id: number
    role: number
    userId: number
    country: number
    countryCode: number
    committeeId: number
    workingPaper: number
    timesSpoken: number
    present: number
    voting: number
    _all: number
  }


  export type ProfileAvgAggregateInputType = {
    id?: true
    userId?: true
    committeeId?: true
    timesSpoken?: true
  }

  export type ProfileSumAggregateInputType = {
    id?: true
    userId?: true
    committeeId?: true
    timesSpoken?: true
  }

  export type ProfileMinAggregateInputType = {
    id?: true
    role?: true
    userId?: true
    country?: true
    countryCode?: true
    committeeId?: true
    workingPaper?: true
    timesSpoken?: true
    present?: true
    voting?: true
  }

  export type ProfileMaxAggregateInputType = {
    id?: true
    role?: true
    userId?: true
    country?: true
    countryCode?: true
    committeeId?: true
    workingPaper?: true
    timesSpoken?: true
    present?: true
    voting?: true
  }

  export type ProfileCountAggregateInputType = {
    id?: true
    role?: true
    userId?: true
    country?: true
    countryCode?: true
    committeeId?: true
    workingPaper?: true
    timesSpoken?: true
    present?: true
    voting?: true
    _all?: true
  }

  export type ProfileAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Profile to aggregate.
     */
    where?: ProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     */
    orderBy?: ProfileOrderByWithRelationInput | ProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Profiles
    **/
    _count?: true | ProfileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProfileAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProfileSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProfileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProfileMaxAggregateInputType
  }

  export type GetProfileAggregateType<T extends ProfileAggregateArgs> = {
        [P in keyof T & keyof AggregateProfile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProfile[P]>
      : GetScalarType<T[P], AggregateProfile[P]>
  }




  export type ProfileGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProfileWhereInput
    orderBy?: ProfileOrderByWithAggregationInput | ProfileOrderByWithAggregationInput[]
    by: ProfileScalarFieldEnum[] | ProfileScalarFieldEnum
    having?: ProfileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProfileCountAggregateInputType | true
    _avg?: ProfileAvgAggregateInputType
    _sum?: ProfileSumAggregateInputType
    _min?: ProfileMinAggregateInputType
    _max?: ProfileMaxAggregateInputType
  }

  export type ProfileGroupByOutputType = {
    id: number
    role: $Enums.Role
    userId: number | null
    country: string | null
    countryCode: string | null
    committeeId: number
    workingPaper: string | null
    timesSpoken: number
    present: boolean
    voting: boolean
    _count: ProfileCountAggregateOutputType | null
    _avg: ProfileAvgAggregateOutputType | null
    _sum: ProfileSumAggregateOutputType | null
    _min: ProfileMinAggregateOutputType | null
    _max: ProfileMaxAggregateOutputType | null
  }

  type GetProfileGroupByPayload<T extends ProfileGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProfileGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProfileGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProfileGroupByOutputType[P]>
            : GetScalarType<T[P], ProfileGroupByOutputType[P]>
        }
      >
    >


  export type ProfileSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    role?: boolean
    userId?: boolean
    country?: boolean
    countryCode?: boolean
    committeeId?: boolean
    workingPaper?: boolean
    timesSpoken?: boolean
    present?: boolean
    voting?: boolean
    user?: boolean | Profile$userArgs<ExtArgs>
    committee?: boolean | CommitteeDefaultArgs<ExtArgs>
    Motion?: boolean | Profile$MotionArgs<ExtArgs>
    _count?: boolean | ProfileCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["profile"]>

  export type ProfileSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    role?: boolean
    userId?: boolean
    country?: boolean
    countryCode?: boolean
    committeeId?: boolean
    workingPaper?: boolean
    timesSpoken?: boolean
    present?: boolean
    voting?: boolean
    user?: boolean | Profile$userArgs<ExtArgs>
    committee?: boolean | CommitteeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["profile"]>

  export type ProfileSelectScalar = {
    id?: boolean
    role?: boolean
    userId?: boolean
    country?: boolean
    countryCode?: boolean
    committeeId?: boolean
    workingPaper?: boolean
    timesSpoken?: boolean
    present?: boolean
    voting?: boolean
  }

  export type ProfileInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | Profile$userArgs<ExtArgs>
    committee?: boolean | CommitteeDefaultArgs<ExtArgs>
    Motion?: boolean | Profile$MotionArgs<ExtArgs>
    _count?: boolean | ProfileCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ProfileIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | Profile$userArgs<ExtArgs>
    committee?: boolean | CommitteeDefaultArgs<ExtArgs>
  }

  export type $ProfilePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Profile"
    objects: {
      user: Prisma.$UserPayload<ExtArgs> | null
      committee: Prisma.$CommitteePayload<ExtArgs>
      Motion: Prisma.$MotionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      role: $Enums.Role
      userId: number | null
      country: string | null
      countryCode: string | null
      committeeId: number
      workingPaper: string | null
      timesSpoken: number
      present: boolean
      voting: boolean
    }, ExtArgs["result"]["profile"]>
    composites: {}
  }

  type ProfileGetPayload<S extends boolean | null | undefined | ProfileDefaultArgs> = $Result.GetResult<Prisma.$ProfilePayload, S>

  type ProfileCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ProfileFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ProfileCountAggregateInputType | true
    }

  export interface ProfileDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Profile'], meta: { name: 'Profile' } }
    /**
     * Find zero or one Profile that matches the filter.
     * @param {ProfileFindUniqueArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProfileFindUniqueArgs>(args: SelectSubset<T, ProfileFindUniqueArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Profile that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ProfileFindUniqueOrThrowArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProfileFindUniqueOrThrowArgs>(args: SelectSubset<T, ProfileFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Profile that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileFindFirstArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProfileFindFirstArgs>(args?: SelectSubset<T, ProfileFindFirstArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Profile that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileFindFirstOrThrowArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProfileFindFirstOrThrowArgs>(args?: SelectSubset<T, ProfileFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Profiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Profiles
     * const profiles = await prisma.profile.findMany()
     * 
     * // Get first 10 Profiles
     * const profiles = await prisma.profile.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const profileWithIdOnly = await prisma.profile.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProfileFindManyArgs>(args?: SelectSubset<T, ProfileFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Profile.
     * @param {ProfileCreateArgs} args - Arguments to create a Profile.
     * @example
     * // Create one Profile
     * const Profile = await prisma.profile.create({
     *   data: {
     *     // ... data to create a Profile
     *   }
     * })
     * 
     */
    create<T extends ProfileCreateArgs>(args: SelectSubset<T, ProfileCreateArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Profiles.
     * @param {ProfileCreateManyArgs} args - Arguments to create many Profiles.
     * @example
     * // Create many Profiles
     * const profile = await prisma.profile.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProfileCreateManyArgs>(args?: SelectSubset<T, ProfileCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Profiles and returns the data saved in the database.
     * @param {ProfileCreateManyAndReturnArgs} args - Arguments to create many Profiles.
     * @example
     * // Create many Profiles
     * const profile = await prisma.profile.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Profiles and only return the `id`
     * const profileWithIdOnly = await prisma.profile.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProfileCreateManyAndReturnArgs>(args?: SelectSubset<T, ProfileCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Profile.
     * @param {ProfileDeleteArgs} args - Arguments to delete one Profile.
     * @example
     * // Delete one Profile
     * const Profile = await prisma.profile.delete({
     *   where: {
     *     // ... filter to delete one Profile
     *   }
     * })
     * 
     */
    delete<T extends ProfileDeleteArgs>(args: SelectSubset<T, ProfileDeleteArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Profile.
     * @param {ProfileUpdateArgs} args - Arguments to update one Profile.
     * @example
     * // Update one Profile
     * const profile = await prisma.profile.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProfileUpdateArgs>(args: SelectSubset<T, ProfileUpdateArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Profiles.
     * @param {ProfileDeleteManyArgs} args - Arguments to filter Profiles to delete.
     * @example
     * // Delete a few Profiles
     * const { count } = await prisma.profile.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProfileDeleteManyArgs>(args?: SelectSubset<T, ProfileDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Profiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Profiles
     * const profile = await prisma.profile.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProfileUpdateManyArgs>(args: SelectSubset<T, ProfileUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Profile.
     * @param {ProfileUpsertArgs} args - Arguments to update or create a Profile.
     * @example
     * // Update or create a Profile
     * const profile = await prisma.profile.upsert({
     *   create: {
     *     // ... data to create a Profile
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Profile we want to update
     *   }
     * })
     */
    upsert<T extends ProfileUpsertArgs>(args: SelectSubset<T, ProfileUpsertArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Profiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileCountArgs} args - Arguments to filter Profiles to count.
     * @example
     * // Count the number of Profiles
     * const count = await prisma.profile.count({
     *   where: {
     *     // ... the filter for the Profiles we want to count
     *   }
     * })
    **/
    count<T extends ProfileCountArgs>(
      args?: Subset<T, ProfileCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProfileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Profile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProfileAggregateArgs>(args: Subset<T, ProfileAggregateArgs>): Prisma.PrismaPromise<GetProfileAggregateType<T>>

    /**
     * Group by Profile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProfileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProfileGroupByArgs['orderBy'] }
        : { orderBy?: ProfileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProfileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProfileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Profile model
   */
  readonly fields: ProfileFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Profile.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProfileClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends Profile$userArgs<ExtArgs> = {}>(args?: Subset<T, Profile$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    committee<T extends CommitteeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CommitteeDefaultArgs<ExtArgs>>): Prisma__CommitteeClient<$Result.GetResult<Prisma.$CommitteePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    Motion<T extends Profile$MotionArgs<ExtArgs> = {}>(args?: Subset<T, Profile$MotionArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MotionPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Profile model
   */ 
  interface ProfileFieldRefs {
    readonly id: FieldRef<"Profile", 'Int'>
    readonly role: FieldRef<"Profile", 'Role'>
    readonly userId: FieldRef<"Profile", 'Int'>
    readonly country: FieldRef<"Profile", 'String'>
    readonly countryCode: FieldRef<"Profile", 'String'>
    readonly committeeId: FieldRef<"Profile", 'Int'>
    readonly workingPaper: FieldRef<"Profile", 'String'>
    readonly timesSpoken: FieldRef<"Profile", 'Int'>
    readonly present: FieldRef<"Profile", 'Boolean'>
    readonly voting: FieldRef<"Profile", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * Profile findUnique
   */
  export type ProfileFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * Filter, which Profile to fetch.
     */
    where: ProfileWhereUniqueInput
  }

  /**
   * Profile findUniqueOrThrow
   */
  export type ProfileFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * Filter, which Profile to fetch.
     */
    where: ProfileWhereUniqueInput
  }

  /**
   * Profile findFirst
   */
  export type ProfileFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * Filter, which Profile to fetch.
     */
    where?: ProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     */
    orderBy?: ProfileOrderByWithRelationInput | ProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Profiles.
     */
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Profiles.
     */
    distinct?: ProfileScalarFieldEnum | ProfileScalarFieldEnum[]
  }

  /**
   * Profile findFirstOrThrow
   */
  export type ProfileFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * Filter, which Profile to fetch.
     */
    where?: ProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     */
    orderBy?: ProfileOrderByWithRelationInput | ProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Profiles.
     */
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Profiles.
     */
    distinct?: ProfileScalarFieldEnum | ProfileScalarFieldEnum[]
  }

  /**
   * Profile findMany
   */
  export type ProfileFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * Filter, which Profiles to fetch.
     */
    where?: ProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     */
    orderBy?: ProfileOrderByWithRelationInput | ProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Profiles.
     */
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     */
    skip?: number
    distinct?: ProfileScalarFieldEnum | ProfileScalarFieldEnum[]
  }

  /**
   * Profile create
   */
  export type ProfileCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * The data needed to create a Profile.
     */
    data: XOR<ProfileCreateInput, ProfileUncheckedCreateInput>
  }

  /**
   * Profile createMany
   */
  export type ProfileCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Profiles.
     */
    data: ProfileCreateManyInput | ProfileCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Profile createManyAndReturn
   */
  export type ProfileCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Profiles.
     */
    data: ProfileCreateManyInput | ProfileCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Profile update
   */
  export type ProfileUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * The data needed to update a Profile.
     */
    data: XOR<ProfileUpdateInput, ProfileUncheckedUpdateInput>
    /**
     * Choose, which Profile to update.
     */
    where: ProfileWhereUniqueInput
  }

  /**
   * Profile updateMany
   */
  export type ProfileUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Profiles.
     */
    data: XOR<ProfileUpdateManyMutationInput, ProfileUncheckedUpdateManyInput>
    /**
     * Filter which Profiles to update
     */
    where?: ProfileWhereInput
  }

  /**
   * Profile upsert
   */
  export type ProfileUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * The filter to search for the Profile to update in case it exists.
     */
    where: ProfileWhereUniqueInput
    /**
     * In case the Profile found by the `where` argument doesn't exist, create a new Profile with this data.
     */
    create: XOR<ProfileCreateInput, ProfileUncheckedCreateInput>
    /**
     * In case the Profile was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProfileUpdateInput, ProfileUncheckedUpdateInput>
  }

  /**
   * Profile delete
   */
  export type ProfileDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * Filter which Profile to delete.
     */
    where: ProfileWhereUniqueInput
  }

  /**
   * Profile deleteMany
   */
  export type ProfileDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Profiles to delete
     */
    where?: ProfileWhereInput
  }

  /**
   * Profile.user
   */
  export type Profile$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Profile.Motion
   */
  export type Profile$MotionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Motion
     */
    select?: MotionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MotionInclude<ExtArgs> | null
    where?: MotionWhereInput
    orderBy?: MotionOrderByWithRelationInput | MotionOrderByWithRelationInput[]
    cursor?: MotionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MotionScalarFieldEnum | MotionScalarFieldEnum[]
  }

  /**
   * Profile without action
   */
  export type ProfileDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
  }


  /**
   * Model Motion
   */

  export type AggregateMotion = {
    _count: MotionCountAggregateOutputType | null
    _avg: MotionAvgAggregateOutputType | null
    _sum: MotionSumAggregateOutputType | null
    _min: MotionMinAggregateOutputType | null
    _max: MotionMaxAggregateOutputType | null
  }

  export type MotionAvgAggregateOutputType = {
    id: number | null
    profileId: number | null
    committeeId: number | null
  }

  export type MotionSumAggregateOutputType = {
    id: number | null
    profileId: number | null
    committeeId: number | null
  }

  export type MotionMinAggregateOutputType = {
    id: number | null
    profileId: number | null
    text: string | null
    code: string | null
    motionType: $Enums.MotionType | null
    time: string | null
    speakingTime: string | null
    committeeId: number | null
    country: string | null
  }

  export type MotionMaxAggregateOutputType = {
    id: number | null
    profileId: number | null
    text: string | null
    code: string | null
    motionType: $Enums.MotionType | null
    time: string | null
    speakingTime: string | null
    committeeId: number | null
    country: string | null
  }

  export type MotionCountAggregateOutputType = {
    id: number
    profileId: number
    text: number
    code: number
    motionType: number
    time: number
    speakingTime: number
    committeeId: number
    country: number
    _all: number
  }


  export type MotionAvgAggregateInputType = {
    id?: true
    profileId?: true
    committeeId?: true
  }

  export type MotionSumAggregateInputType = {
    id?: true
    profileId?: true
    committeeId?: true
  }

  export type MotionMinAggregateInputType = {
    id?: true
    profileId?: true
    text?: true
    code?: true
    motionType?: true
    time?: true
    speakingTime?: true
    committeeId?: true
    country?: true
  }

  export type MotionMaxAggregateInputType = {
    id?: true
    profileId?: true
    text?: true
    code?: true
    motionType?: true
    time?: true
    speakingTime?: true
    committeeId?: true
    country?: true
  }

  export type MotionCountAggregateInputType = {
    id?: true
    profileId?: true
    text?: true
    code?: true
    motionType?: true
    time?: true
    speakingTime?: true
    committeeId?: true
    country?: true
    _all?: true
  }

  export type MotionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Motion to aggregate.
     */
    where?: MotionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Motions to fetch.
     */
    orderBy?: MotionOrderByWithRelationInput | MotionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MotionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Motions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Motions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Motions
    **/
    _count?: true | MotionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MotionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MotionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MotionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MotionMaxAggregateInputType
  }

  export type GetMotionAggregateType<T extends MotionAggregateArgs> = {
        [P in keyof T & keyof AggregateMotion]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMotion[P]>
      : GetScalarType<T[P], AggregateMotion[P]>
  }




  export type MotionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MotionWhereInput
    orderBy?: MotionOrderByWithAggregationInput | MotionOrderByWithAggregationInput[]
    by: MotionScalarFieldEnum[] | MotionScalarFieldEnum
    having?: MotionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MotionCountAggregateInputType | true
    _avg?: MotionAvgAggregateInputType
    _sum?: MotionSumAggregateInputType
    _min?: MotionMinAggregateInputType
    _max?: MotionMaxAggregateInputType
  }

  export type MotionGroupByOutputType = {
    id: number
    profileId: number | null
    text: string | null
    code: string | null
    motionType: $Enums.MotionType
    time: string
    speakingTime: string | null
    committeeId: number
    country: string | null
    _count: MotionCountAggregateOutputType | null
    _avg: MotionAvgAggregateOutputType | null
    _sum: MotionSumAggregateOutputType | null
    _min: MotionMinAggregateOutputType | null
    _max: MotionMaxAggregateOutputType | null
  }

  type GetMotionGroupByPayload<T extends MotionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MotionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MotionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MotionGroupByOutputType[P]>
            : GetScalarType<T[P], MotionGroupByOutputType[P]>
        }
      >
    >


  export type MotionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    profileId?: boolean
    text?: boolean
    code?: boolean
    motionType?: boolean
    time?: boolean
    speakingTime?: boolean
    committeeId?: boolean
    country?: boolean
    profile?: boolean | Motion$profileArgs<ExtArgs>
    committee?: boolean | CommitteeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["motion"]>

  export type MotionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    profileId?: boolean
    text?: boolean
    code?: boolean
    motionType?: boolean
    time?: boolean
    speakingTime?: boolean
    committeeId?: boolean
    country?: boolean
    profile?: boolean | Motion$profileArgs<ExtArgs>
    committee?: boolean | CommitteeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["motion"]>

  export type MotionSelectScalar = {
    id?: boolean
    profileId?: boolean
    text?: boolean
    code?: boolean
    motionType?: boolean
    time?: boolean
    speakingTime?: boolean
    committeeId?: boolean
    country?: boolean
  }

  export type MotionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    profile?: boolean | Motion$profileArgs<ExtArgs>
    committee?: boolean | CommitteeDefaultArgs<ExtArgs>
  }
  export type MotionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    profile?: boolean | Motion$profileArgs<ExtArgs>
    committee?: boolean | CommitteeDefaultArgs<ExtArgs>
  }

  export type $MotionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Motion"
    objects: {
      profile: Prisma.$ProfilePayload<ExtArgs> | null
      committee: Prisma.$CommitteePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      profileId: number | null
      text: string | null
      code: string | null
      motionType: $Enums.MotionType
      time: string
      speakingTime: string | null
      committeeId: number
      country: string | null
    }, ExtArgs["result"]["motion"]>
    composites: {}
  }

  type MotionGetPayload<S extends boolean | null | undefined | MotionDefaultArgs> = $Result.GetResult<Prisma.$MotionPayload, S>

  type MotionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MotionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MotionCountAggregateInputType | true
    }

  export interface MotionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Motion'], meta: { name: 'Motion' } }
    /**
     * Find zero or one Motion that matches the filter.
     * @param {MotionFindUniqueArgs} args - Arguments to find a Motion
     * @example
     * // Get one Motion
     * const motion = await prisma.motion.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MotionFindUniqueArgs>(args: SelectSubset<T, MotionFindUniqueArgs<ExtArgs>>): Prisma__MotionClient<$Result.GetResult<Prisma.$MotionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Motion that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {MotionFindUniqueOrThrowArgs} args - Arguments to find a Motion
     * @example
     * // Get one Motion
     * const motion = await prisma.motion.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MotionFindUniqueOrThrowArgs>(args: SelectSubset<T, MotionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MotionClient<$Result.GetResult<Prisma.$MotionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Motion that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MotionFindFirstArgs} args - Arguments to find a Motion
     * @example
     * // Get one Motion
     * const motion = await prisma.motion.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MotionFindFirstArgs>(args?: SelectSubset<T, MotionFindFirstArgs<ExtArgs>>): Prisma__MotionClient<$Result.GetResult<Prisma.$MotionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Motion that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MotionFindFirstOrThrowArgs} args - Arguments to find a Motion
     * @example
     * // Get one Motion
     * const motion = await prisma.motion.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MotionFindFirstOrThrowArgs>(args?: SelectSubset<T, MotionFindFirstOrThrowArgs<ExtArgs>>): Prisma__MotionClient<$Result.GetResult<Prisma.$MotionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Motions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MotionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Motions
     * const motions = await prisma.motion.findMany()
     * 
     * // Get first 10 Motions
     * const motions = await prisma.motion.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const motionWithIdOnly = await prisma.motion.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MotionFindManyArgs>(args?: SelectSubset<T, MotionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MotionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Motion.
     * @param {MotionCreateArgs} args - Arguments to create a Motion.
     * @example
     * // Create one Motion
     * const Motion = await prisma.motion.create({
     *   data: {
     *     // ... data to create a Motion
     *   }
     * })
     * 
     */
    create<T extends MotionCreateArgs>(args: SelectSubset<T, MotionCreateArgs<ExtArgs>>): Prisma__MotionClient<$Result.GetResult<Prisma.$MotionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Motions.
     * @param {MotionCreateManyArgs} args - Arguments to create many Motions.
     * @example
     * // Create many Motions
     * const motion = await prisma.motion.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MotionCreateManyArgs>(args?: SelectSubset<T, MotionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Motions and returns the data saved in the database.
     * @param {MotionCreateManyAndReturnArgs} args - Arguments to create many Motions.
     * @example
     * // Create many Motions
     * const motion = await prisma.motion.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Motions and only return the `id`
     * const motionWithIdOnly = await prisma.motion.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MotionCreateManyAndReturnArgs>(args?: SelectSubset<T, MotionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MotionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Motion.
     * @param {MotionDeleteArgs} args - Arguments to delete one Motion.
     * @example
     * // Delete one Motion
     * const Motion = await prisma.motion.delete({
     *   where: {
     *     // ... filter to delete one Motion
     *   }
     * })
     * 
     */
    delete<T extends MotionDeleteArgs>(args: SelectSubset<T, MotionDeleteArgs<ExtArgs>>): Prisma__MotionClient<$Result.GetResult<Prisma.$MotionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Motion.
     * @param {MotionUpdateArgs} args - Arguments to update one Motion.
     * @example
     * // Update one Motion
     * const motion = await prisma.motion.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MotionUpdateArgs>(args: SelectSubset<T, MotionUpdateArgs<ExtArgs>>): Prisma__MotionClient<$Result.GetResult<Prisma.$MotionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Motions.
     * @param {MotionDeleteManyArgs} args - Arguments to filter Motions to delete.
     * @example
     * // Delete a few Motions
     * const { count } = await prisma.motion.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MotionDeleteManyArgs>(args?: SelectSubset<T, MotionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Motions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MotionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Motions
     * const motion = await prisma.motion.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MotionUpdateManyArgs>(args: SelectSubset<T, MotionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Motion.
     * @param {MotionUpsertArgs} args - Arguments to update or create a Motion.
     * @example
     * // Update or create a Motion
     * const motion = await prisma.motion.upsert({
     *   create: {
     *     // ... data to create a Motion
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Motion we want to update
     *   }
     * })
     */
    upsert<T extends MotionUpsertArgs>(args: SelectSubset<T, MotionUpsertArgs<ExtArgs>>): Prisma__MotionClient<$Result.GetResult<Prisma.$MotionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Motions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MotionCountArgs} args - Arguments to filter Motions to count.
     * @example
     * // Count the number of Motions
     * const count = await prisma.motion.count({
     *   where: {
     *     // ... the filter for the Motions we want to count
     *   }
     * })
    **/
    count<T extends MotionCountArgs>(
      args?: Subset<T, MotionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MotionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Motion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MotionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MotionAggregateArgs>(args: Subset<T, MotionAggregateArgs>): Prisma.PrismaPromise<GetMotionAggregateType<T>>

    /**
     * Group by Motion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MotionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MotionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MotionGroupByArgs['orderBy'] }
        : { orderBy?: MotionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MotionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMotionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Motion model
   */
  readonly fields: MotionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Motion.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MotionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    profile<T extends Motion$profileArgs<ExtArgs> = {}>(args?: Subset<T, Motion$profileArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    committee<T extends CommitteeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CommitteeDefaultArgs<ExtArgs>>): Prisma__CommitteeClient<$Result.GetResult<Prisma.$CommitteePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Motion model
   */ 
  interface MotionFieldRefs {
    readonly id: FieldRef<"Motion", 'Int'>
    readonly profileId: FieldRef<"Motion", 'Int'>
    readonly text: FieldRef<"Motion", 'String'>
    readonly code: FieldRef<"Motion", 'String'>
    readonly motionType: FieldRef<"Motion", 'MotionType'>
    readonly time: FieldRef<"Motion", 'String'>
    readonly speakingTime: FieldRef<"Motion", 'String'>
    readonly committeeId: FieldRef<"Motion", 'Int'>
    readonly country: FieldRef<"Motion", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Motion findUnique
   */
  export type MotionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Motion
     */
    select?: MotionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MotionInclude<ExtArgs> | null
    /**
     * Filter, which Motion to fetch.
     */
    where: MotionWhereUniqueInput
  }

  /**
   * Motion findUniqueOrThrow
   */
  export type MotionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Motion
     */
    select?: MotionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MotionInclude<ExtArgs> | null
    /**
     * Filter, which Motion to fetch.
     */
    where: MotionWhereUniqueInput
  }

  /**
   * Motion findFirst
   */
  export type MotionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Motion
     */
    select?: MotionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MotionInclude<ExtArgs> | null
    /**
     * Filter, which Motion to fetch.
     */
    where?: MotionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Motions to fetch.
     */
    orderBy?: MotionOrderByWithRelationInput | MotionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Motions.
     */
    cursor?: MotionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Motions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Motions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Motions.
     */
    distinct?: MotionScalarFieldEnum | MotionScalarFieldEnum[]
  }

  /**
   * Motion findFirstOrThrow
   */
  export type MotionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Motion
     */
    select?: MotionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MotionInclude<ExtArgs> | null
    /**
     * Filter, which Motion to fetch.
     */
    where?: MotionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Motions to fetch.
     */
    orderBy?: MotionOrderByWithRelationInput | MotionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Motions.
     */
    cursor?: MotionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Motions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Motions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Motions.
     */
    distinct?: MotionScalarFieldEnum | MotionScalarFieldEnum[]
  }

  /**
   * Motion findMany
   */
  export type MotionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Motion
     */
    select?: MotionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MotionInclude<ExtArgs> | null
    /**
     * Filter, which Motions to fetch.
     */
    where?: MotionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Motions to fetch.
     */
    orderBy?: MotionOrderByWithRelationInput | MotionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Motions.
     */
    cursor?: MotionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Motions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Motions.
     */
    skip?: number
    distinct?: MotionScalarFieldEnum | MotionScalarFieldEnum[]
  }

  /**
   * Motion create
   */
  export type MotionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Motion
     */
    select?: MotionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MotionInclude<ExtArgs> | null
    /**
     * The data needed to create a Motion.
     */
    data: XOR<MotionCreateInput, MotionUncheckedCreateInput>
  }

  /**
   * Motion createMany
   */
  export type MotionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Motions.
     */
    data: MotionCreateManyInput | MotionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Motion createManyAndReturn
   */
  export type MotionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Motion
     */
    select?: MotionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Motions.
     */
    data: MotionCreateManyInput | MotionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MotionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Motion update
   */
  export type MotionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Motion
     */
    select?: MotionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MotionInclude<ExtArgs> | null
    /**
     * The data needed to update a Motion.
     */
    data: XOR<MotionUpdateInput, MotionUncheckedUpdateInput>
    /**
     * Choose, which Motion to update.
     */
    where: MotionWhereUniqueInput
  }

  /**
   * Motion updateMany
   */
  export type MotionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Motions.
     */
    data: XOR<MotionUpdateManyMutationInput, MotionUncheckedUpdateManyInput>
    /**
     * Filter which Motions to update
     */
    where?: MotionWhereInput
  }

  /**
   * Motion upsert
   */
  export type MotionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Motion
     */
    select?: MotionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MotionInclude<ExtArgs> | null
    /**
     * The filter to search for the Motion to update in case it exists.
     */
    where: MotionWhereUniqueInput
    /**
     * In case the Motion found by the `where` argument doesn't exist, create a new Motion with this data.
     */
    create: XOR<MotionCreateInput, MotionUncheckedCreateInput>
    /**
     * In case the Motion was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MotionUpdateInput, MotionUncheckedUpdateInput>
  }

  /**
   * Motion delete
   */
  export type MotionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Motion
     */
    select?: MotionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MotionInclude<ExtArgs> | null
    /**
     * Filter which Motion to delete.
     */
    where: MotionWhereUniqueInput
  }

  /**
   * Motion deleteMany
   */
  export type MotionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Motions to delete
     */
    where?: MotionWhereInput
  }

  /**
   * Motion.profile
   */
  export type Motion$profileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    where?: ProfileWhereInput
  }

  /**
   * Motion without action
   */
  export type MotionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Motion
     */
    select?: MotionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MotionInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const CommitteeScalarFieldEnum: {
    id: 'id',
    name: 'name',
    topic: 'topic',
    conference: 'conference',
    code: 'code'
  };

  export type CommitteeScalarFieldEnum = (typeof CommitteeScalarFieldEnum)[keyof typeof CommitteeScalarFieldEnum]


  export const CountryScalarFieldEnum: {
    id: 'id',
    country: 'country',
    code: 'code',
    committeeId: 'committeeId'
  };

  export type CountryScalarFieldEnum = (typeof CountryScalarFieldEnum)[keyof typeof CountryScalarFieldEnum]


  export const ProfileScalarFieldEnum: {
    id: 'id',
    role: 'role',
    userId: 'userId',
    country: 'country',
    countryCode: 'countryCode',
    committeeId: 'committeeId',
    workingPaper: 'workingPaper',
    timesSpoken: 'timesSpoken',
    present: 'present',
    voting: 'voting'
  };

  export type ProfileScalarFieldEnum = (typeof ProfileScalarFieldEnum)[keyof typeof ProfileScalarFieldEnum]


  export const MotionScalarFieldEnum: {
    id: 'id',
    profileId: 'profileId',
    text: 'text',
    code: 'code',
    motionType: 'motionType',
    time: 'time',
    speakingTime: 'speakingTime',
    committeeId: 'committeeId',
    country: 'country'
  };

  export type MotionScalarFieldEnum = (typeof MotionScalarFieldEnum)[keyof typeof MotionScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Role'
   */
  export type EnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role'>
    


  /**
   * Reference to a field of type 'Role[]'
   */
  export type ListEnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'MotionType'
   */
  export type EnumMotionTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MotionType'>
    


  /**
   * Reference to a field of type 'MotionType[]'
   */
  export type ListEnumMotionTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MotionType[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    profiles?: ProfileListRelationFilter
    committees?: CommitteeListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    profiles?: ProfileOrderByRelationAggregateInput
    committees?: CommitteeOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    password?: StringFilter<"User"> | string
    profiles?: ProfileListRelationFilter
    committees?: CommitteeListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
  }

  export type CommitteeWhereInput = {
    AND?: CommitteeWhereInput | CommitteeWhereInput[]
    OR?: CommitteeWhereInput[]
    NOT?: CommitteeWhereInput | CommitteeWhereInput[]
    id?: IntFilter<"Committee"> | number
    name?: StringFilter<"Committee"> | string
    topic?: StringNullableFilter<"Committee"> | string | null
    conference?: StringNullableFilter<"Committee"> | string | null
    code?: StringFilter<"Committee"> | string
    countries?: CountryListRelationFilter
    users?: UserListRelationFilter
    profiles?: ProfileListRelationFilter
    Motion?: MotionListRelationFilter
  }

  export type CommitteeOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    topic?: SortOrderInput | SortOrder
    conference?: SortOrderInput | SortOrder
    code?: SortOrder
    countries?: CountryOrderByRelationAggregateInput
    users?: UserOrderByRelationAggregateInput
    profiles?: ProfileOrderByRelationAggregateInput
    Motion?: MotionOrderByRelationAggregateInput
  }

  export type CommitteeWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name?: string
    AND?: CommitteeWhereInput | CommitteeWhereInput[]
    OR?: CommitteeWhereInput[]
    NOT?: CommitteeWhereInput | CommitteeWhereInput[]
    topic?: StringNullableFilter<"Committee"> | string | null
    conference?: StringNullableFilter<"Committee"> | string | null
    code?: StringFilter<"Committee"> | string
    countries?: CountryListRelationFilter
    users?: UserListRelationFilter
    profiles?: ProfileListRelationFilter
    Motion?: MotionListRelationFilter
  }, "id" | "name">

  export type CommitteeOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    topic?: SortOrderInput | SortOrder
    conference?: SortOrderInput | SortOrder
    code?: SortOrder
    _count?: CommitteeCountOrderByAggregateInput
    _avg?: CommitteeAvgOrderByAggregateInput
    _max?: CommitteeMaxOrderByAggregateInput
    _min?: CommitteeMinOrderByAggregateInput
    _sum?: CommitteeSumOrderByAggregateInput
  }

  export type CommitteeScalarWhereWithAggregatesInput = {
    AND?: CommitteeScalarWhereWithAggregatesInput | CommitteeScalarWhereWithAggregatesInput[]
    OR?: CommitteeScalarWhereWithAggregatesInput[]
    NOT?: CommitteeScalarWhereWithAggregatesInput | CommitteeScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Committee"> | number
    name?: StringWithAggregatesFilter<"Committee"> | string
    topic?: StringNullableWithAggregatesFilter<"Committee"> | string | null
    conference?: StringNullableWithAggregatesFilter<"Committee"> | string | null
    code?: StringWithAggregatesFilter<"Committee"> | string
  }

  export type CountryWhereInput = {
    AND?: CountryWhereInput | CountryWhereInput[]
    OR?: CountryWhereInput[]
    NOT?: CountryWhereInput | CountryWhereInput[]
    id?: IntFilter<"Country"> | number
    country?: StringFilter<"Country"> | string
    code?: StringFilter<"Country"> | string
    committeeId?: IntNullableFilter<"Country"> | number | null
    committee?: XOR<CommitteeNullableRelationFilter, CommitteeWhereInput> | null
  }

  export type CountryOrderByWithRelationInput = {
    id?: SortOrder
    country?: SortOrder
    code?: SortOrder
    committeeId?: SortOrderInput | SortOrder
    committee?: CommitteeOrderByWithRelationInput
  }

  export type CountryWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CountryWhereInput | CountryWhereInput[]
    OR?: CountryWhereInput[]
    NOT?: CountryWhereInput | CountryWhereInput[]
    country?: StringFilter<"Country"> | string
    code?: StringFilter<"Country"> | string
    committeeId?: IntNullableFilter<"Country"> | number | null
    committee?: XOR<CommitteeNullableRelationFilter, CommitteeWhereInput> | null
  }, "id">

  export type CountryOrderByWithAggregationInput = {
    id?: SortOrder
    country?: SortOrder
    code?: SortOrder
    committeeId?: SortOrderInput | SortOrder
    _count?: CountryCountOrderByAggregateInput
    _avg?: CountryAvgOrderByAggregateInput
    _max?: CountryMaxOrderByAggregateInput
    _min?: CountryMinOrderByAggregateInput
    _sum?: CountrySumOrderByAggregateInput
  }

  export type CountryScalarWhereWithAggregatesInput = {
    AND?: CountryScalarWhereWithAggregatesInput | CountryScalarWhereWithAggregatesInput[]
    OR?: CountryScalarWhereWithAggregatesInput[]
    NOT?: CountryScalarWhereWithAggregatesInput | CountryScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Country"> | number
    country?: StringWithAggregatesFilter<"Country"> | string
    code?: StringWithAggregatesFilter<"Country"> | string
    committeeId?: IntNullableWithAggregatesFilter<"Country"> | number | null
  }

  export type ProfileWhereInput = {
    AND?: ProfileWhereInput | ProfileWhereInput[]
    OR?: ProfileWhereInput[]
    NOT?: ProfileWhereInput | ProfileWhereInput[]
    id?: IntFilter<"Profile"> | number
    role?: EnumRoleFilter<"Profile"> | $Enums.Role
    userId?: IntNullableFilter<"Profile"> | number | null
    country?: StringNullableFilter<"Profile"> | string | null
    countryCode?: StringNullableFilter<"Profile"> | string | null
    committeeId?: IntFilter<"Profile"> | number
    workingPaper?: StringNullableFilter<"Profile"> | string | null
    timesSpoken?: IntFilter<"Profile"> | number
    present?: BoolFilter<"Profile"> | boolean
    voting?: BoolFilter<"Profile"> | boolean
    user?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    committee?: XOR<CommitteeRelationFilter, CommitteeWhereInput>
    Motion?: MotionListRelationFilter
  }

  export type ProfileOrderByWithRelationInput = {
    id?: SortOrder
    role?: SortOrder
    userId?: SortOrderInput | SortOrder
    country?: SortOrderInput | SortOrder
    countryCode?: SortOrderInput | SortOrder
    committeeId?: SortOrder
    workingPaper?: SortOrderInput | SortOrder
    timesSpoken?: SortOrder
    present?: SortOrder
    voting?: SortOrder
    user?: UserOrderByWithRelationInput
    committee?: CommitteeOrderByWithRelationInput
    Motion?: MotionOrderByRelationAggregateInput
  }

  export type ProfileWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ProfileWhereInput | ProfileWhereInput[]
    OR?: ProfileWhereInput[]
    NOT?: ProfileWhereInput | ProfileWhereInput[]
    role?: EnumRoleFilter<"Profile"> | $Enums.Role
    userId?: IntNullableFilter<"Profile"> | number | null
    country?: StringNullableFilter<"Profile"> | string | null
    countryCode?: StringNullableFilter<"Profile"> | string | null
    committeeId?: IntFilter<"Profile"> | number
    workingPaper?: StringNullableFilter<"Profile"> | string | null
    timesSpoken?: IntFilter<"Profile"> | number
    present?: BoolFilter<"Profile"> | boolean
    voting?: BoolFilter<"Profile"> | boolean
    user?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    committee?: XOR<CommitteeRelationFilter, CommitteeWhereInput>
    Motion?: MotionListRelationFilter
  }, "id">

  export type ProfileOrderByWithAggregationInput = {
    id?: SortOrder
    role?: SortOrder
    userId?: SortOrderInput | SortOrder
    country?: SortOrderInput | SortOrder
    countryCode?: SortOrderInput | SortOrder
    committeeId?: SortOrder
    workingPaper?: SortOrderInput | SortOrder
    timesSpoken?: SortOrder
    present?: SortOrder
    voting?: SortOrder
    _count?: ProfileCountOrderByAggregateInput
    _avg?: ProfileAvgOrderByAggregateInput
    _max?: ProfileMaxOrderByAggregateInput
    _min?: ProfileMinOrderByAggregateInput
    _sum?: ProfileSumOrderByAggregateInput
  }

  export type ProfileScalarWhereWithAggregatesInput = {
    AND?: ProfileScalarWhereWithAggregatesInput | ProfileScalarWhereWithAggregatesInput[]
    OR?: ProfileScalarWhereWithAggregatesInput[]
    NOT?: ProfileScalarWhereWithAggregatesInput | ProfileScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Profile"> | number
    role?: EnumRoleWithAggregatesFilter<"Profile"> | $Enums.Role
    userId?: IntNullableWithAggregatesFilter<"Profile"> | number | null
    country?: StringNullableWithAggregatesFilter<"Profile"> | string | null
    countryCode?: StringNullableWithAggregatesFilter<"Profile"> | string | null
    committeeId?: IntWithAggregatesFilter<"Profile"> | number
    workingPaper?: StringNullableWithAggregatesFilter<"Profile"> | string | null
    timesSpoken?: IntWithAggregatesFilter<"Profile"> | number
    present?: BoolWithAggregatesFilter<"Profile"> | boolean
    voting?: BoolWithAggregatesFilter<"Profile"> | boolean
  }

  export type MotionWhereInput = {
    AND?: MotionWhereInput | MotionWhereInput[]
    OR?: MotionWhereInput[]
    NOT?: MotionWhereInput | MotionWhereInput[]
    id?: IntFilter<"Motion"> | number
    profileId?: IntNullableFilter<"Motion"> | number | null
    text?: StringNullableFilter<"Motion"> | string | null
    code?: StringNullableFilter<"Motion"> | string | null
    motionType?: EnumMotionTypeFilter<"Motion"> | $Enums.MotionType
    time?: StringFilter<"Motion"> | string
    speakingTime?: StringNullableFilter<"Motion"> | string | null
    committeeId?: IntFilter<"Motion"> | number
    country?: StringNullableFilter<"Motion"> | string | null
    profile?: XOR<ProfileNullableRelationFilter, ProfileWhereInput> | null
    committee?: XOR<CommitteeRelationFilter, CommitteeWhereInput>
  }

  export type MotionOrderByWithRelationInput = {
    id?: SortOrder
    profileId?: SortOrderInput | SortOrder
    text?: SortOrderInput | SortOrder
    code?: SortOrderInput | SortOrder
    motionType?: SortOrder
    time?: SortOrder
    speakingTime?: SortOrderInput | SortOrder
    committeeId?: SortOrder
    country?: SortOrderInput | SortOrder
    profile?: ProfileOrderByWithRelationInput
    committee?: CommitteeOrderByWithRelationInput
  }

  export type MotionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: MotionWhereInput | MotionWhereInput[]
    OR?: MotionWhereInput[]
    NOT?: MotionWhereInput | MotionWhereInput[]
    profileId?: IntNullableFilter<"Motion"> | number | null
    text?: StringNullableFilter<"Motion"> | string | null
    code?: StringNullableFilter<"Motion"> | string | null
    motionType?: EnumMotionTypeFilter<"Motion"> | $Enums.MotionType
    time?: StringFilter<"Motion"> | string
    speakingTime?: StringNullableFilter<"Motion"> | string | null
    committeeId?: IntFilter<"Motion"> | number
    country?: StringNullableFilter<"Motion"> | string | null
    profile?: XOR<ProfileNullableRelationFilter, ProfileWhereInput> | null
    committee?: XOR<CommitteeRelationFilter, CommitteeWhereInput>
  }, "id">

  export type MotionOrderByWithAggregationInput = {
    id?: SortOrder
    profileId?: SortOrderInput | SortOrder
    text?: SortOrderInput | SortOrder
    code?: SortOrderInput | SortOrder
    motionType?: SortOrder
    time?: SortOrder
    speakingTime?: SortOrderInput | SortOrder
    committeeId?: SortOrder
    country?: SortOrderInput | SortOrder
    _count?: MotionCountOrderByAggregateInput
    _avg?: MotionAvgOrderByAggregateInput
    _max?: MotionMaxOrderByAggregateInput
    _min?: MotionMinOrderByAggregateInput
    _sum?: MotionSumOrderByAggregateInput
  }

  export type MotionScalarWhereWithAggregatesInput = {
    AND?: MotionScalarWhereWithAggregatesInput | MotionScalarWhereWithAggregatesInput[]
    OR?: MotionScalarWhereWithAggregatesInput[]
    NOT?: MotionScalarWhereWithAggregatesInput | MotionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Motion"> | number
    profileId?: IntNullableWithAggregatesFilter<"Motion"> | number | null
    text?: StringNullableWithAggregatesFilter<"Motion"> | string | null
    code?: StringNullableWithAggregatesFilter<"Motion"> | string | null
    motionType?: EnumMotionTypeWithAggregatesFilter<"Motion"> | $Enums.MotionType
    time?: StringWithAggregatesFilter<"Motion"> | string
    speakingTime?: StringNullableWithAggregatesFilter<"Motion"> | string | null
    committeeId?: IntWithAggregatesFilter<"Motion"> | number
    country?: StringNullableWithAggregatesFilter<"Motion"> | string | null
  }

  export type UserCreateInput = {
    email: string
    password: string
    profiles?: ProfileCreateNestedManyWithoutUserInput
    committees?: CommitteeCreateNestedManyWithoutUsersInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    email: string
    password: string
    profiles?: ProfileUncheckedCreateNestedManyWithoutUserInput
    committees?: CommitteeUncheckedCreateNestedManyWithoutUsersInput
  }

  export type UserUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profiles?: ProfileUpdateManyWithoutUserNestedInput
    committees?: CommitteeUpdateManyWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profiles?: ProfileUncheckedUpdateManyWithoutUserNestedInput
    committees?: CommitteeUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    email: string
    password: string
  }

  export type UserUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type CommitteeCreateInput = {
    name: string
    topic?: string | null
    conference?: string | null
    code: string
    countries?: CountryCreateNestedManyWithoutCommitteeInput
    users?: UserCreateNestedManyWithoutCommitteesInput
    profiles?: ProfileCreateNestedManyWithoutCommitteeInput
    Motion?: MotionCreateNestedManyWithoutCommitteeInput
  }

  export type CommitteeUncheckedCreateInput = {
    id?: number
    name: string
    topic?: string | null
    conference?: string | null
    code: string
    countries?: CountryUncheckedCreateNestedManyWithoutCommitteeInput
    users?: UserUncheckedCreateNestedManyWithoutCommitteesInput
    profiles?: ProfileUncheckedCreateNestedManyWithoutCommitteeInput
    Motion?: MotionUncheckedCreateNestedManyWithoutCommitteeInput
  }

  export type CommitteeUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    topic?: NullableStringFieldUpdateOperationsInput | string | null
    conference?: NullableStringFieldUpdateOperationsInput | string | null
    code?: StringFieldUpdateOperationsInput | string
    countries?: CountryUpdateManyWithoutCommitteeNestedInput
    users?: UserUpdateManyWithoutCommitteesNestedInput
    profiles?: ProfileUpdateManyWithoutCommitteeNestedInput
    Motion?: MotionUpdateManyWithoutCommitteeNestedInput
  }

  export type CommitteeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    topic?: NullableStringFieldUpdateOperationsInput | string | null
    conference?: NullableStringFieldUpdateOperationsInput | string | null
    code?: StringFieldUpdateOperationsInput | string
    countries?: CountryUncheckedUpdateManyWithoutCommitteeNestedInput
    users?: UserUncheckedUpdateManyWithoutCommitteesNestedInput
    profiles?: ProfileUncheckedUpdateManyWithoutCommitteeNestedInput
    Motion?: MotionUncheckedUpdateManyWithoutCommitteeNestedInput
  }

  export type CommitteeCreateManyInput = {
    id?: number
    name: string
    topic?: string | null
    conference?: string | null
    code: string
  }

  export type CommitteeUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    topic?: NullableStringFieldUpdateOperationsInput | string | null
    conference?: NullableStringFieldUpdateOperationsInput | string | null
    code?: StringFieldUpdateOperationsInput | string
  }

  export type CommitteeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    topic?: NullableStringFieldUpdateOperationsInput | string | null
    conference?: NullableStringFieldUpdateOperationsInput | string | null
    code?: StringFieldUpdateOperationsInput | string
  }

  export type CountryCreateInput = {
    country: string
    code: string
    committee?: CommitteeCreateNestedOneWithoutCountriesInput
  }

  export type CountryUncheckedCreateInput = {
    id?: number
    country: string
    code: string
    committeeId?: number | null
  }

  export type CountryUpdateInput = {
    country?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    committee?: CommitteeUpdateOneWithoutCountriesNestedInput
  }

  export type CountryUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    country?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    committeeId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type CountryCreateManyInput = {
    id?: number
    country: string
    code: string
    committeeId?: number | null
  }

  export type CountryUpdateManyMutationInput = {
    country?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
  }

  export type CountryUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    country?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    committeeId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ProfileCreateInput = {
    role?: $Enums.Role
    country?: string | null
    countryCode?: string | null
    workingPaper?: string | null
    timesSpoken?: number
    present?: boolean
    voting?: boolean
    user?: UserCreateNestedOneWithoutProfilesInput
    committee: CommitteeCreateNestedOneWithoutProfilesInput
    Motion?: MotionCreateNestedManyWithoutProfileInput
  }

  export type ProfileUncheckedCreateInput = {
    id?: number
    role?: $Enums.Role
    userId?: number | null
    country?: string | null
    countryCode?: string | null
    committeeId: number
    workingPaper?: string | null
    timesSpoken?: number
    present?: boolean
    voting?: boolean
    Motion?: MotionUncheckedCreateNestedManyWithoutProfileInput
  }

  export type ProfileUpdateInput = {
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    country?: NullableStringFieldUpdateOperationsInput | string | null
    countryCode?: NullableStringFieldUpdateOperationsInput | string | null
    workingPaper?: NullableStringFieldUpdateOperationsInput | string | null
    timesSpoken?: IntFieldUpdateOperationsInput | number
    present?: BoolFieldUpdateOperationsInput | boolean
    voting?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneWithoutProfilesNestedInput
    committee?: CommitteeUpdateOneRequiredWithoutProfilesNestedInput
    Motion?: MotionUpdateManyWithoutProfileNestedInput
  }

  export type ProfileUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    countryCode?: NullableStringFieldUpdateOperationsInput | string | null
    committeeId?: IntFieldUpdateOperationsInput | number
    workingPaper?: NullableStringFieldUpdateOperationsInput | string | null
    timesSpoken?: IntFieldUpdateOperationsInput | number
    present?: BoolFieldUpdateOperationsInput | boolean
    voting?: BoolFieldUpdateOperationsInput | boolean
    Motion?: MotionUncheckedUpdateManyWithoutProfileNestedInput
  }

  export type ProfileCreateManyInput = {
    id?: number
    role?: $Enums.Role
    userId?: number | null
    country?: string | null
    countryCode?: string | null
    committeeId: number
    workingPaper?: string | null
    timesSpoken?: number
    present?: boolean
    voting?: boolean
  }

  export type ProfileUpdateManyMutationInput = {
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    country?: NullableStringFieldUpdateOperationsInput | string | null
    countryCode?: NullableStringFieldUpdateOperationsInput | string | null
    workingPaper?: NullableStringFieldUpdateOperationsInput | string | null
    timesSpoken?: IntFieldUpdateOperationsInput | number
    present?: BoolFieldUpdateOperationsInput | boolean
    voting?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ProfileUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    countryCode?: NullableStringFieldUpdateOperationsInput | string | null
    committeeId?: IntFieldUpdateOperationsInput | number
    workingPaper?: NullableStringFieldUpdateOperationsInput | string | null
    timesSpoken?: IntFieldUpdateOperationsInput | number
    present?: BoolFieldUpdateOperationsInput | boolean
    voting?: BoolFieldUpdateOperationsInput | boolean
  }

  export type MotionCreateInput = {
    text?: string | null
    code?: string | null
    motionType?: $Enums.MotionType
    time: string
    speakingTime?: string | null
    country?: string | null
    profile?: ProfileCreateNestedOneWithoutMotionInput
    committee: CommitteeCreateNestedOneWithoutMotionInput
  }

  export type MotionUncheckedCreateInput = {
    id?: number
    profileId?: number | null
    text?: string | null
    code?: string | null
    motionType?: $Enums.MotionType
    time: string
    speakingTime?: string | null
    committeeId: number
    country?: string | null
  }

  export type MotionUpdateInput = {
    text?: NullableStringFieldUpdateOperationsInput | string | null
    code?: NullableStringFieldUpdateOperationsInput | string | null
    motionType?: EnumMotionTypeFieldUpdateOperationsInput | $Enums.MotionType
    time?: StringFieldUpdateOperationsInput | string
    speakingTime?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: ProfileUpdateOneWithoutMotionNestedInput
    committee?: CommitteeUpdateOneRequiredWithoutMotionNestedInput
  }

  export type MotionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    profileId?: NullableIntFieldUpdateOperationsInput | number | null
    text?: NullableStringFieldUpdateOperationsInput | string | null
    code?: NullableStringFieldUpdateOperationsInput | string | null
    motionType?: EnumMotionTypeFieldUpdateOperationsInput | $Enums.MotionType
    time?: StringFieldUpdateOperationsInput | string
    speakingTime?: NullableStringFieldUpdateOperationsInput | string | null
    committeeId?: IntFieldUpdateOperationsInput | number
    country?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MotionCreateManyInput = {
    id?: number
    profileId?: number | null
    text?: string | null
    code?: string | null
    motionType?: $Enums.MotionType
    time: string
    speakingTime?: string | null
    committeeId: number
    country?: string | null
  }

  export type MotionUpdateManyMutationInput = {
    text?: NullableStringFieldUpdateOperationsInput | string | null
    code?: NullableStringFieldUpdateOperationsInput | string | null
    motionType?: EnumMotionTypeFieldUpdateOperationsInput | $Enums.MotionType
    time?: StringFieldUpdateOperationsInput | string
    speakingTime?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MotionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    profileId?: NullableIntFieldUpdateOperationsInput | number | null
    text?: NullableStringFieldUpdateOperationsInput | string | null
    code?: NullableStringFieldUpdateOperationsInput | string | null
    motionType?: EnumMotionTypeFieldUpdateOperationsInput | $Enums.MotionType
    time?: StringFieldUpdateOperationsInput | string
    speakingTime?: NullableStringFieldUpdateOperationsInput | string | null
    committeeId?: IntFieldUpdateOperationsInput | number
    country?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type ProfileListRelationFilter = {
    every?: ProfileWhereInput
    some?: ProfileWhereInput
    none?: ProfileWhereInput
  }

  export type CommitteeListRelationFilter = {
    every?: CommitteeWhereInput
    some?: CommitteeWhereInput
    none?: CommitteeWhereInput
  }

  export type ProfileOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CommitteeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type CountryListRelationFilter = {
    every?: CountryWhereInput
    some?: CountryWhereInput
    none?: CountryWhereInput
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type MotionListRelationFilter = {
    every?: MotionWhereInput
    some?: MotionWhereInput
    none?: MotionWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type CountryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MotionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CommitteeCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    topic?: SortOrder
    conference?: SortOrder
    code?: SortOrder
  }

  export type CommitteeAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CommitteeMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    topic?: SortOrder
    conference?: SortOrder
    code?: SortOrder
  }

  export type CommitteeMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    topic?: SortOrder
    conference?: SortOrder
    code?: SortOrder
  }

  export type CommitteeSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type CommitteeNullableRelationFilter = {
    is?: CommitteeWhereInput | null
    isNot?: CommitteeWhereInput | null
  }

  export type CountryCountOrderByAggregateInput = {
    id?: SortOrder
    country?: SortOrder
    code?: SortOrder
    committeeId?: SortOrder
  }

  export type CountryAvgOrderByAggregateInput = {
    id?: SortOrder
    committeeId?: SortOrder
  }

  export type CountryMaxOrderByAggregateInput = {
    id?: SortOrder
    country?: SortOrder
    code?: SortOrder
    committeeId?: SortOrder
  }

  export type CountryMinOrderByAggregateInput = {
    id?: SortOrder
    country?: SortOrder
    code?: SortOrder
    committeeId?: SortOrder
  }

  export type CountrySumOrderByAggregateInput = {
    id?: SortOrder
    committeeId?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type EnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type UserNullableRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type CommitteeRelationFilter = {
    is?: CommitteeWhereInput
    isNot?: CommitteeWhereInput
  }

  export type ProfileCountOrderByAggregateInput = {
    id?: SortOrder
    role?: SortOrder
    userId?: SortOrder
    country?: SortOrder
    countryCode?: SortOrder
    committeeId?: SortOrder
    workingPaper?: SortOrder
    timesSpoken?: SortOrder
    present?: SortOrder
    voting?: SortOrder
  }

  export type ProfileAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    committeeId?: SortOrder
    timesSpoken?: SortOrder
  }

  export type ProfileMaxOrderByAggregateInput = {
    id?: SortOrder
    role?: SortOrder
    userId?: SortOrder
    country?: SortOrder
    countryCode?: SortOrder
    committeeId?: SortOrder
    workingPaper?: SortOrder
    timesSpoken?: SortOrder
    present?: SortOrder
    voting?: SortOrder
  }

  export type ProfileMinOrderByAggregateInput = {
    id?: SortOrder
    role?: SortOrder
    userId?: SortOrder
    country?: SortOrder
    countryCode?: SortOrder
    committeeId?: SortOrder
    workingPaper?: SortOrder
    timesSpoken?: SortOrder
    present?: SortOrder
    voting?: SortOrder
  }

  export type ProfileSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    committeeId?: SortOrder
    timesSpoken?: SortOrder
  }

  export type EnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type EnumMotionTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.MotionType | EnumMotionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.MotionType[] | ListEnumMotionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.MotionType[] | ListEnumMotionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumMotionTypeFilter<$PrismaModel> | $Enums.MotionType
  }

  export type ProfileNullableRelationFilter = {
    is?: ProfileWhereInput | null
    isNot?: ProfileWhereInput | null
  }

  export type MotionCountOrderByAggregateInput = {
    id?: SortOrder
    profileId?: SortOrder
    text?: SortOrder
    code?: SortOrder
    motionType?: SortOrder
    time?: SortOrder
    speakingTime?: SortOrder
    committeeId?: SortOrder
    country?: SortOrder
  }

  export type MotionAvgOrderByAggregateInput = {
    id?: SortOrder
    profileId?: SortOrder
    committeeId?: SortOrder
  }

  export type MotionMaxOrderByAggregateInput = {
    id?: SortOrder
    profileId?: SortOrder
    text?: SortOrder
    code?: SortOrder
    motionType?: SortOrder
    time?: SortOrder
    speakingTime?: SortOrder
    committeeId?: SortOrder
    country?: SortOrder
  }

  export type MotionMinOrderByAggregateInput = {
    id?: SortOrder
    profileId?: SortOrder
    text?: SortOrder
    code?: SortOrder
    motionType?: SortOrder
    time?: SortOrder
    speakingTime?: SortOrder
    committeeId?: SortOrder
    country?: SortOrder
  }

  export type MotionSumOrderByAggregateInput = {
    id?: SortOrder
    profileId?: SortOrder
    committeeId?: SortOrder
  }

  export type EnumMotionTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MotionType | EnumMotionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.MotionType[] | ListEnumMotionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.MotionType[] | ListEnumMotionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumMotionTypeWithAggregatesFilter<$PrismaModel> | $Enums.MotionType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumMotionTypeFilter<$PrismaModel>
    _max?: NestedEnumMotionTypeFilter<$PrismaModel>
  }

  export type ProfileCreateNestedManyWithoutUserInput = {
    create?: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput> | ProfileCreateWithoutUserInput[] | ProfileUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProfileCreateOrConnectWithoutUserInput | ProfileCreateOrConnectWithoutUserInput[]
    createMany?: ProfileCreateManyUserInputEnvelope
    connect?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
  }

  export type CommitteeCreateNestedManyWithoutUsersInput = {
    create?: XOR<CommitteeCreateWithoutUsersInput, CommitteeUncheckedCreateWithoutUsersInput> | CommitteeCreateWithoutUsersInput[] | CommitteeUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: CommitteeCreateOrConnectWithoutUsersInput | CommitteeCreateOrConnectWithoutUsersInput[]
    connect?: CommitteeWhereUniqueInput | CommitteeWhereUniqueInput[]
  }

  export type ProfileUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput> | ProfileCreateWithoutUserInput[] | ProfileUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProfileCreateOrConnectWithoutUserInput | ProfileCreateOrConnectWithoutUserInput[]
    createMany?: ProfileCreateManyUserInputEnvelope
    connect?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
  }

  export type CommitteeUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<CommitteeCreateWithoutUsersInput, CommitteeUncheckedCreateWithoutUsersInput> | CommitteeCreateWithoutUsersInput[] | CommitteeUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: CommitteeCreateOrConnectWithoutUsersInput | CommitteeCreateOrConnectWithoutUsersInput[]
    connect?: CommitteeWhereUniqueInput | CommitteeWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type ProfileUpdateManyWithoutUserNestedInput = {
    create?: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput> | ProfileCreateWithoutUserInput[] | ProfileUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProfileCreateOrConnectWithoutUserInput | ProfileCreateOrConnectWithoutUserInput[]
    upsert?: ProfileUpsertWithWhereUniqueWithoutUserInput | ProfileUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ProfileCreateManyUserInputEnvelope
    set?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
    disconnect?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
    delete?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
    connect?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
    update?: ProfileUpdateWithWhereUniqueWithoutUserInput | ProfileUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ProfileUpdateManyWithWhereWithoutUserInput | ProfileUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ProfileScalarWhereInput | ProfileScalarWhereInput[]
  }

  export type CommitteeUpdateManyWithoutUsersNestedInput = {
    create?: XOR<CommitteeCreateWithoutUsersInput, CommitteeUncheckedCreateWithoutUsersInput> | CommitteeCreateWithoutUsersInput[] | CommitteeUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: CommitteeCreateOrConnectWithoutUsersInput | CommitteeCreateOrConnectWithoutUsersInput[]
    upsert?: CommitteeUpsertWithWhereUniqueWithoutUsersInput | CommitteeUpsertWithWhereUniqueWithoutUsersInput[]
    set?: CommitteeWhereUniqueInput | CommitteeWhereUniqueInput[]
    disconnect?: CommitteeWhereUniqueInput | CommitteeWhereUniqueInput[]
    delete?: CommitteeWhereUniqueInput | CommitteeWhereUniqueInput[]
    connect?: CommitteeWhereUniqueInput | CommitteeWhereUniqueInput[]
    update?: CommitteeUpdateWithWhereUniqueWithoutUsersInput | CommitteeUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: CommitteeUpdateManyWithWhereWithoutUsersInput | CommitteeUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: CommitteeScalarWhereInput | CommitteeScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ProfileUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput> | ProfileCreateWithoutUserInput[] | ProfileUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProfileCreateOrConnectWithoutUserInput | ProfileCreateOrConnectWithoutUserInput[]
    upsert?: ProfileUpsertWithWhereUniqueWithoutUserInput | ProfileUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ProfileCreateManyUserInputEnvelope
    set?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
    disconnect?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
    delete?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
    connect?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
    update?: ProfileUpdateWithWhereUniqueWithoutUserInput | ProfileUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ProfileUpdateManyWithWhereWithoutUserInput | ProfileUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ProfileScalarWhereInput | ProfileScalarWhereInput[]
  }

  export type CommitteeUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<CommitteeCreateWithoutUsersInput, CommitteeUncheckedCreateWithoutUsersInput> | CommitteeCreateWithoutUsersInput[] | CommitteeUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: CommitteeCreateOrConnectWithoutUsersInput | CommitteeCreateOrConnectWithoutUsersInput[]
    upsert?: CommitteeUpsertWithWhereUniqueWithoutUsersInput | CommitteeUpsertWithWhereUniqueWithoutUsersInput[]
    set?: CommitteeWhereUniqueInput | CommitteeWhereUniqueInput[]
    disconnect?: CommitteeWhereUniqueInput | CommitteeWhereUniqueInput[]
    delete?: CommitteeWhereUniqueInput | CommitteeWhereUniqueInput[]
    connect?: CommitteeWhereUniqueInput | CommitteeWhereUniqueInput[]
    update?: CommitteeUpdateWithWhereUniqueWithoutUsersInput | CommitteeUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: CommitteeUpdateManyWithWhereWithoutUsersInput | CommitteeUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: CommitteeScalarWhereInput | CommitteeScalarWhereInput[]
  }

  export type CountryCreateNestedManyWithoutCommitteeInput = {
    create?: XOR<CountryCreateWithoutCommitteeInput, CountryUncheckedCreateWithoutCommitteeInput> | CountryCreateWithoutCommitteeInput[] | CountryUncheckedCreateWithoutCommitteeInput[]
    connectOrCreate?: CountryCreateOrConnectWithoutCommitteeInput | CountryCreateOrConnectWithoutCommitteeInput[]
    createMany?: CountryCreateManyCommitteeInputEnvelope
    connect?: CountryWhereUniqueInput | CountryWhereUniqueInput[]
  }

  export type UserCreateNestedManyWithoutCommitteesInput = {
    create?: XOR<UserCreateWithoutCommitteesInput, UserUncheckedCreateWithoutCommitteesInput> | UserCreateWithoutCommitteesInput[] | UserUncheckedCreateWithoutCommitteesInput[]
    connectOrCreate?: UserCreateOrConnectWithoutCommitteesInput | UserCreateOrConnectWithoutCommitteesInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type ProfileCreateNestedManyWithoutCommitteeInput = {
    create?: XOR<ProfileCreateWithoutCommitteeInput, ProfileUncheckedCreateWithoutCommitteeInput> | ProfileCreateWithoutCommitteeInput[] | ProfileUncheckedCreateWithoutCommitteeInput[]
    connectOrCreate?: ProfileCreateOrConnectWithoutCommitteeInput | ProfileCreateOrConnectWithoutCommitteeInput[]
    createMany?: ProfileCreateManyCommitteeInputEnvelope
    connect?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
  }

  export type MotionCreateNestedManyWithoutCommitteeInput = {
    create?: XOR<MotionCreateWithoutCommitteeInput, MotionUncheckedCreateWithoutCommitteeInput> | MotionCreateWithoutCommitteeInput[] | MotionUncheckedCreateWithoutCommitteeInput[]
    connectOrCreate?: MotionCreateOrConnectWithoutCommitteeInput | MotionCreateOrConnectWithoutCommitteeInput[]
    createMany?: MotionCreateManyCommitteeInputEnvelope
    connect?: MotionWhereUniqueInput | MotionWhereUniqueInput[]
  }

  export type CountryUncheckedCreateNestedManyWithoutCommitteeInput = {
    create?: XOR<CountryCreateWithoutCommitteeInput, CountryUncheckedCreateWithoutCommitteeInput> | CountryCreateWithoutCommitteeInput[] | CountryUncheckedCreateWithoutCommitteeInput[]
    connectOrCreate?: CountryCreateOrConnectWithoutCommitteeInput | CountryCreateOrConnectWithoutCommitteeInput[]
    createMany?: CountryCreateManyCommitteeInputEnvelope
    connect?: CountryWhereUniqueInput | CountryWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutCommitteesInput = {
    create?: XOR<UserCreateWithoutCommitteesInput, UserUncheckedCreateWithoutCommitteesInput> | UserCreateWithoutCommitteesInput[] | UserUncheckedCreateWithoutCommitteesInput[]
    connectOrCreate?: UserCreateOrConnectWithoutCommitteesInput | UserCreateOrConnectWithoutCommitteesInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type ProfileUncheckedCreateNestedManyWithoutCommitteeInput = {
    create?: XOR<ProfileCreateWithoutCommitteeInput, ProfileUncheckedCreateWithoutCommitteeInput> | ProfileCreateWithoutCommitteeInput[] | ProfileUncheckedCreateWithoutCommitteeInput[]
    connectOrCreate?: ProfileCreateOrConnectWithoutCommitteeInput | ProfileCreateOrConnectWithoutCommitteeInput[]
    createMany?: ProfileCreateManyCommitteeInputEnvelope
    connect?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
  }

  export type MotionUncheckedCreateNestedManyWithoutCommitteeInput = {
    create?: XOR<MotionCreateWithoutCommitteeInput, MotionUncheckedCreateWithoutCommitteeInput> | MotionCreateWithoutCommitteeInput[] | MotionUncheckedCreateWithoutCommitteeInput[]
    connectOrCreate?: MotionCreateOrConnectWithoutCommitteeInput | MotionCreateOrConnectWithoutCommitteeInput[]
    createMany?: MotionCreateManyCommitteeInputEnvelope
    connect?: MotionWhereUniqueInput | MotionWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type CountryUpdateManyWithoutCommitteeNestedInput = {
    create?: XOR<CountryCreateWithoutCommitteeInput, CountryUncheckedCreateWithoutCommitteeInput> | CountryCreateWithoutCommitteeInput[] | CountryUncheckedCreateWithoutCommitteeInput[]
    connectOrCreate?: CountryCreateOrConnectWithoutCommitteeInput | CountryCreateOrConnectWithoutCommitteeInput[]
    upsert?: CountryUpsertWithWhereUniqueWithoutCommitteeInput | CountryUpsertWithWhereUniqueWithoutCommitteeInput[]
    createMany?: CountryCreateManyCommitteeInputEnvelope
    set?: CountryWhereUniqueInput | CountryWhereUniqueInput[]
    disconnect?: CountryWhereUniqueInput | CountryWhereUniqueInput[]
    delete?: CountryWhereUniqueInput | CountryWhereUniqueInput[]
    connect?: CountryWhereUniqueInput | CountryWhereUniqueInput[]
    update?: CountryUpdateWithWhereUniqueWithoutCommitteeInput | CountryUpdateWithWhereUniqueWithoutCommitteeInput[]
    updateMany?: CountryUpdateManyWithWhereWithoutCommitteeInput | CountryUpdateManyWithWhereWithoutCommitteeInput[]
    deleteMany?: CountryScalarWhereInput | CountryScalarWhereInput[]
  }

  export type UserUpdateManyWithoutCommitteesNestedInput = {
    create?: XOR<UserCreateWithoutCommitteesInput, UserUncheckedCreateWithoutCommitteesInput> | UserCreateWithoutCommitteesInput[] | UserUncheckedCreateWithoutCommitteesInput[]
    connectOrCreate?: UserCreateOrConnectWithoutCommitteesInput | UserCreateOrConnectWithoutCommitteesInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutCommitteesInput | UserUpsertWithWhereUniqueWithoutCommitteesInput[]
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutCommitteesInput | UserUpdateWithWhereUniqueWithoutCommitteesInput[]
    updateMany?: UserUpdateManyWithWhereWithoutCommitteesInput | UserUpdateManyWithWhereWithoutCommitteesInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type ProfileUpdateManyWithoutCommitteeNestedInput = {
    create?: XOR<ProfileCreateWithoutCommitteeInput, ProfileUncheckedCreateWithoutCommitteeInput> | ProfileCreateWithoutCommitteeInput[] | ProfileUncheckedCreateWithoutCommitteeInput[]
    connectOrCreate?: ProfileCreateOrConnectWithoutCommitteeInput | ProfileCreateOrConnectWithoutCommitteeInput[]
    upsert?: ProfileUpsertWithWhereUniqueWithoutCommitteeInput | ProfileUpsertWithWhereUniqueWithoutCommitteeInput[]
    createMany?: ProfileCreateManyCommitteeInputEnvelope
    set?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
    disconnect?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
    delete?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
    connect?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
    update?: ProfileUpdateWithWhereUniqueWithoutCommitteeInput | ProfileUpdateWithWhereUniqueWithoutCommitteeInput[]
    updateMany?: ProfileUpdateManyWithWhereWithoutCommitteeInput | ProfileUpdateManyWithWhereWithoutCommitteeInput[]
    deleteMany?: ProfileScalarWhereInput | ProfileScalarWhereInput[]
  }

  export type MotionUpdateManyWithoutCommitteeNestedInput = {
    create?: XOR<MotionCreateWithoutCommitteeInput, MotionUncheckedCreateWithoutCommitteeInput> | MotionCreateWithoutCommitteeInput[] | MotionUncheckedCreateWithoutCommitteeInput[]
    connectOrCreate?: MotionCreateOrConnectWithoutCommitteeInput | MotionCreateOrConnectWithoutCommitteeInput[]
    upsert?: MotionUpsertWithWhereUniqueWithoutCommitteeInput | MotionUpsertWithWhereUniqueWithoutCommitteeInput[]
    createMany?: MotionCreateManyCommitteeInputEnvelope
    set?: MotionWhereUniqueInput | MotionWhereUniqueInput[]
    disconnect?: MotionWhereUniqueInput | MotionWhereUniqueInput[]
    delete?: MotionWhereUniqueInput | MotionWhereUniqueInput[]
    connect?: MotionWhereUniqueInput | MotionWhereUniqueInput[]
    update?: MotionUpdateWithWhereUniqueWithoutCommitteeInput | MotionUpdateWithWhereUniqueWithoutCommitteeInput[]
    updateMany?: MotionUpdateManyWithWhereWithoutCommitteeInput | MotionUpdateManyWithWhereWithoutCommitteeInput[]
    deleteMany?: MotionScalarWhereInput | MotionScalarWhereInput[]
  }

  export type CountryUncheckedUpdateManyWithoutCommitteeNestedInput = {
    create?: XOR<CountryCreateWithoutCommitteeInput, CountryUncheckedCreateWithoutCommitteeInput> | CountryCreateWithoutCommitteeInput[] | CountryUncheckedCreateWithoutCommitteeInput[]
    connectOrCreate?: CountryCreateOrConnectWithoutCommitteeInput | CountryCreateOrConnectWithoutCommitteeInput[]
    upsert?: CountryUpsertWithWhereUniqueWithoutCommitteeInput | CountryUpsertWithWhereUniqueWithoutCommitteeInput[]
    createMany?: CountryCreateManyCommitteeInputEnvelope
    set?: CountryWhereUniqueInput | CountryWhereUniqueInput[]
    disconnect?: CountryWhereUniqueInput | CountryWhereUniqueInput[]
    delete?: CountryWhereUniqueInput | CountryWhereUniqueInput[]
    connect?: CountryWhereUniqueInput | CountryWhereUniqueInput[]
    update?: CountryUpdateWithWhereUniqueWithoutCommitteeInput | CountryUpdateWithWhereUniqueWithoutCommitteeInput[]
    updateMany?: CountryUpdateManyWithWhereWithoutCommitteeInput | CountryUpdateManyWithWhereWithoutCommitteeInput[]
    deleteMany?: CountryScalarWhereInput | CountryScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutCommitteesNestedInput = {
    create?: XOR<UserCreateWithoutCommitteesInput, UserUncheckedCreateWithoutCommitteesInput> | UserCreateWithoutCommitteesInput[] | UserUncheckedCreateWithoutCommitteesInput[]
    connectOrCreate?: UserCreateOrConnectWithoutCommitteesInput | UserCreateOrConnectWithoutCommitteesInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutCommitteesInput | UserUpsertWithWhereUniqueWithoutCommitteesInput[]
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutCommitteesInput | UserUpdateWithWhereUniqueWithoutCommitteesInput[]
    updateMany?: UserUpdateManyWithWhereWithoutCommitteesInput | UserUpdateManyWithWhereWithoutCommitteesInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type ProfileUncheckedUpdateManyWithoutCommitteeNestedInput = {
    create?: XOR<ProfileCreateWithoutCommitteeInput, ProfileUncheckedCreateWithoutCommitteeInput> | ProfileCreateWithoutCommitteeInput[] | ProfileUncheckedCreateWithoutCommitteeInput[]
    connectOrCreate?: ProfileCreateOrConnectWithoutCommitteeInput | ProfileCreateOrConnectWithoutCommitteeInput[]
    upsert?: ProfileUpsertWithWhereUniqueWithoutCommitteeInput | ProfileUpsertWithWhereUniqueWithoutCommitteeInput[]
    createMany?: ProfileCreateManyCommitteeInputEnvelope
    set?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
    disconnect?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
    delete?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
    connect?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
    update?: ProfileUpdateWithWhereUniqueWithoutCommitteeInput | ProfileUpdateWithWhereUniqueWithoutCommitteeInput[]
    updateMany?: ProfileUpdateManyWithWhereWithoutCommitteeInput | ProfileUpdateManyWithWhereWithoutCommitteeInput[]
    deleteMany?: ProfileScalarWhereInput | ProfileScalarWhereInput[]
  }

  export type MotionUncheckedUpdateManyWithoutCommitteeNestedInput = {
    create?: XOR<MotionCreateWithoutCommitteeInput, MotionUncheckedCreateWithoutCommitteeInput> | MotionCreateWithoutCommitteeInput[] | MotionUncheckedCreateWithoutCommitteeInput[]
    connectOrCreate?: MotionCreateOrConnectWithoutCommitteeInput | MotionCreateOrConnectWithoutCommitteeInput[]
    upsert?: MotionUpsertWithWhereUniqueWithoutCommitteeInput | MotionUpsertWithWhereUniqueWithoutCommitteeInput[]
    createMany?: MotionCreateManyCommitteeInputEnvelope
    set?: MotionWhereUniqueInput | MotionWhereUniqueInput[]
    disconnect?: MotionWhereUniqueInput | MotionWhereUniqueInput[]
    delete?: MotionWhereUniqueInput | MotionWhereUniqueInput[]
    connect?: MotionWhereUniqueInput | MotionWhereUniqueInput[]
    update?: MotionUpdateWithWhereUniqueWithoutCommitteeInput | MotionUpdateWithWhereUniqueWithoutCommitteeInput[]
    updateMany?: MotionUpdateManyWithWhereWithoutCommitteeInput | MotionUpdateManyWithWhereWithoutCommitteeInput[]
    deleteMany?: MotionScalarWhereInput | MotionScalarWhereInput[]
  }

  export type CommitteeCreateNestedOneWithoutCountriesInput = {
    create?: XOR<CommitteeCreateWithoutCountriesInput, CommitteeUncheckedCreateWithoutCountriesInput>
    connectOrCreate?: CommitteeCreateOrConnectWithoutCountriesInput
    connect?: CommitteeWhereUniqueInput
  }

  export type CommitteeUpdateOneWithoutCountriesNestedInput = {
    create?: XOR<CommitteeCreateWithoutCountriesInput, CommitteeUncheckedCreateWithoutCountriesInput>
    connectOrCreate?: CommitteeCreateOrConnectWithoutCountriesInput
    upsert?: CommitteeUpsertWithoutCountriesInput
    disconnect?: CommitteeWhereInput | boolean
    delete?: CommitteeWhereInput | boolean
    connect?: CommitteeWhereUniqueInput
    update?: XOR<XOR<CommitteeUpdateToOneWithWhereWithoutCountriesInput, CommitteeUpdateWithoutCountriesInput>, CommitteeUncheckedUpdateWithoutCountriesInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserCreateNestedOneWithoutProfilesInput = {
    create?: XOR<UserCreateWithoutProfilesInput, UserUncheckedCreateWithoutProfilesInput>
    connectOrCreate?: UserCreateOrConnectWithoutProfilesInput
    connect?: UserWhereUniqueInput
  }

  export type CommitteeCreateNestedOneWithoutProfilesInput = {
    create?: XOR<CommitteeCreateWithoutProfilesInput, CommitteeUncheckedCreateWithoutProfilesInput>
    connectOrCreate?: CommitteeCreateOrConnectWithoutProfilesInput
    connect?: CommitteeWhereUniqueInput
  }

  export type MotionCreateNestedManyWithoutProfileInput = {
    create?: XOR<MotionCreateWithoutProfileInput, MotionUncheckedCreateWithoutProfileInput> | MotionCreateWithoutProfileInput[] | MotionUncheckedCreateWithoutProfileInput[]
    connectOrCreate?: MotionCreateOrConnectWithoutProfileInput | MotionCreateOrConnectWithoutProfileInput[]
    createMany?: MotionCreateManyProfileInputEnvelope
    connect?: MotionWhereUniqueInput | MotionWhereUniqueInput[]
  }

  export type MotionUncheckedCreateNestedManyWithoutProfileInput = {
    create?: XOR<MotionCreateWithoutProfileInput, MotionUncheckedCreateWithoutProfileInput> | MotionCreateWithoutProfileInput[] | MotionUncheckedCreateWithoutProfileInput[]
    connectOrCreate?: MotionCreateOrConnectWithoutProfileInput | MotionCreateOrConnectWithoutProfileInput[]
    createMany?: MotionCreateManyProfileInputEnvelope
    connect?: MotionWhereUniqueInput | MotionWhereUniqueInput[]
  }

  export type EnumRoleFieldUpdateOperationsInput = {
    set?: $Enums.Role
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type UserUpdateOneWithoutProfilesNestedInput = {
    create?: XOR<UserCreateWithoutProfilesInput, UserUncheckedCreateWithoutProfilesInput>
    connectOrCreate?: UserCreateOrConnectWithoutProfilesInput
    upsert?: UserUpsertWithoutProfilesInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutProfilesInput, UserUpdateWithoutProfilesInput>, UserUncheckedUpdateWithoutProfilesInput>
  }

  export type CommitteeUpdateOneRequiredWithoutProfilesNestedInput = {
    create?: XOR<CommitteeCreateWithoutProfilesInput, CommitteeUncheckedCreateWithoutProfilesInput>
    connectOrCreate?: CommitteeCreateOrConnectWithoutProfilesInput
    upsert?: CommitteeUpsertWithoutProfilesInput
    connect?: CommitteeWhereUniqueInput
    update?: XOR<XOR<CommitteeUpdateToOneWithWhereWithoutProfilesInput, CommitteeUpdateWithoutProfilesInput>, CommitteeUncheckedUpdateWithoutProfilesInput>
  }

  export type MotionUpdateManyWithoutProfileNestedInput = {
    create?: XOR<MotionCreateWithoutProfileInput, MotionUncheckedCreateWithoutProfileInput> | MotionCreateWithoutProfileInput[] | MotionUncheckedCreateWithoutProfileInput[]
    connectOrCreate?: MotionCreateOrConnectWithoutProfileInput | MotionCreateOrConnectWithoutProfileInput[]
    upsert?: MotionUpsertWithWhereUniqueWithoutProfileInput | MotionUpsertWithWhereUniqueWithoutProfileInput[]
    createMany?: MotionCreateManyProfileInputEnvelope
    set?: MotionWhereUniqueInput | MotionWhereUniqueInput[]
    disconnect?: MotionWhereUniqueInput | MotionWhereUniqueInput[]
    delete?: MotionWhereUniqueInput | MotionWhereUniqueInput[]
    connect?: MotionWhereUniqueInput | MotionWhereUniqueInput[]
    update?: MotionUpdateWithWhereUniqueWithoutProfileInput | MotionUpdateWithWhereUniqueWithoutProfileInput[]
    updateMany?: MotionUpdateManyWithWhereWithoutProfileInput | MotionUpdateManyWithWhereWithoutProfileInput[]
    deleteMany?: MotionScalarWhereInput | MotionScalarWhereInput[]
  }

  export type MotionUncheckedUpdateManyWithoutProfileNestedInput = {
    create?: XOR<MotionCreateWithoutProfileInput, MotionUncheckedCreateWithoutProfileInput> | MotionCreateWithoutProfileInput[] | MotionUncheckedCreateWithoutProfileInput[]
    connectOrCreate?: MotionCreateOrConnectWithoutProfileInput | MotionCreateOrConnectWithoutProfileInput[]
    upsert?: MotionUpsertWithWhereUniqueWithoutProfileInput | MotionUpsertWithWhereUniqueWithoutProfileInput[]
    createMany?: MotionCreateManyProfileInputEnvelope
    set?: MotionWhereUniqueInput | MotionWhereUniqueInput[]
    disconnect?: MotionWhereUniqueInput | MotionWhereUniqueInput[]
    delete?: MotionWhereUniqueInput | MotionWhereUniqueInput[]
    connect?: MotionWhereUniqueInput | MotionWhereUniqueInput[]
    update?: MotionUpdateWithWhereUniqueWithoutProfileInput | MotionUpdateWithWhereUniqueWithoutProfileInput[]
    updateMany?: MotionUpdateManyWithWhereWithoutProfileInput | MotionUpdateManyWithWhereWithoutProfileInput[]
    deleteMany?: MotionScalarWhereInput | MotionScalarWhereInput[]
  }

  export type ProfileCreateNestedOneWithoutMotionInput = {
    create?: XOR<ProfileCreateWithoutMotionInput, ProfileUncheckedCreateWithoutMotionInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutMotionInput
    connect?: ProfileWhereUniqueInput
  }

  export type CommitteeCreateNestedOneWithoutMotionInput = {
    create?: XOR<CommitteeCreateWithoutMotionInput, CommitteeUncheckedCreateWithoutMotionInput>
    connectOrCreate?: CommitteeCreateOrConnectWithoutMotionInput
    connect?: CommitteeWhereUniqueInput
  }

  export type EnumMotionTypeFieldUpdateOperationsInput = {
    set?: $Enums.MotionType
  }

  export type ProfileUpdateOneWithoutMotionNestedInput = {
    create?: XOR<ProfileCreateWithoutMotionInput, ProfileUncheckedCreateWithoutMotionInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutMotionInput
    upsert?: ProfileUpsertWithoutMotionInput
    disconnect?: ProfileWhereInput | boolean
    delete?: ProfileWhereInput | boolean
    connect?: ProfileWhereUniqueInput
    update?: XOR<XOR<ProfileUpdateToOneWithWhereWithoutMotionInput, ProfileUpdateWithoutMotionInput>, ProfileUncheckedUpdateWithoutMotionInput>
  }

  export type CommitteeUpdateOneRequiredWithoutMotionNestedInput = {
    create?: XOR<CommitteeCreateWithoutMotionInput, CommitteeUncheckedCreateWithoutMotionInput>
    connectOrCreate?: CommitteeCreateOrConnectWithoutMotionInput
    upsert?: CommitteeUpsertWithoutMotionInput
    connect?: CommitteeWhereUniqueInput
    update?: XOR<XOR<CommitteeUpdateToOneWithWhereWithoutMotionInput, CommitteeUpdateWithoutMotionInput>, CommitteeUncheckedUpdateWithoutMotionInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedEnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedEnumMotionTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.MotionType | EnumMotionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.MotionType[] | ListEnumMotionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.MotionType[] | ListEnumMotionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumMotionTypeFilter<$PrismaModel> | $Enums.MotionType
  }

  export type NestedEnumMotionTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MotionType | EnumMotionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.MotionType[] | ListEnumMotionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.MotionType[] | ListEnumMotionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumMotionTypeWithAggregatesFilter<$PrismaModel> | $Enums.MotionType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumMotionTypeFilter<$PrismaModel>
    _max?: NestedEnumMotionTypeFilter<$PrismaModel>
  }

  export type ProfileCreateWithoutUserInput = {
    role?: $Enums.Role
    country?: string | null
    countryCode?: string | null
    workingPaper?: string | null
    timesSpoken?: number
    present?: boolean
    voting?: boolean
    committee: CommitteeCreateNestedOneWithoutProfilesInput
    Motion?: MotionCreateNestedManyWithoutProfileInput
  }

  export type ProfileUncheckedCreateWithoutUserInput = {
    id?: number
    role?: $Enums.Role
    country?: string | null
    countryCode?: string | null
    committeeId: number
    workingPaper?: string | null
    timesSpoken?: number
    present?: boolean
    voting?: boolean
    Motion?: MotionUncheckedCreateNestedManyWithoutProfileInput
  }

  export type ProfileCreateOrConnectWithoutUserInput = {
    where: ProfileWhereUniqueInput
    create: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput>
  }

  export type ProfileCreateManyUserInputEnvelope = {
    data: ProfileCreateManyUserInput | ProfileCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type CommitteeCreateWithoutUsersInput = {
    name: string
    topic?: string | null
    conference?: string | null
    code: string
    countries?: CountryCreateNestedManyWithoutCommitteeInput
    profiles?: ProfileCreateNestedManyWithoutCommitteeInput
    Motion?: MotionCreateNestedManyWithoutCommitteeInput
  }

  export type CommitteeUncheckedCreateWithoutUsersInput = {
    id?: number
    name: string
    topic?: string | null
    conference?: string | null
    code: string
    countries?: CountryUncheckedCreateNestedManyWithoutCommitteeInput
    profiles?: ProfileUncheckedCreateNestedManyWithoutCommitteeInput
    Motion?: MotionUncheckedCreateNestedManyWithoutCommitteeInput
  }

  export type CommitteeCreateOrConnectWithoutUsersInput = {
    where: CommitteeWhereUniqueInput
    create: XOR<CommitteeCreateWithoutUsersInput, CommitteeUncheckedCreateWithoutUsersInput>
  }

  export type ProfileUpsertWithWhereUniqueWithoutUserInput = {
    where: ProfileWhereUniqueInput
    update: XOR<ProfileUpdateWithoutUserInput, ProfileUncheckedUpdateWithoutUserInput>
    create: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput>
  }

  export type ProfileUpdateWithWhereUniqueWithoutUserInput = {
    where: ProfileWhereUniqueInput
    data: XOR<ProfileUpdateWithoutUserInput, ProfileUncheckedUpdateWithoutUserInput>
  }

  export type ProfileUpdateManyWithWhereWithoutUserInput = {
    where: ProfileScalarWhereInput
    data: XOR<ProfileUpdateManyMutationInput, ProfileUncheckedUpdateManyWithoutUserInput>
  }

  export type ProfileScalarWhereInput = {
    AND?: ProfileScalarWhereInput | ProfileScalarWhereInput[]
    OR?: ProfileScalarWhereInput[]
    NOT?: ProfileScalarWhereInput | ProfileScalarWhereInput[]
    id?: IntFilter<"Profile"> | number
    role?: EnumRoleFilter<"Profile"> | $Enums.Role
    userId?: IntNullableFilter<"Profile"> | number | null
    country?: StringNullableFilter<"Profile"> | string | null
    countryCode?: StringNullableFilter<"Profile"> | string | null
    committeeId?: IntFilter<"Profile"> | number
    workingPaper?: StringNullableFilter<"Profile"> | string | null
    timesSpoken?: IntFilter<"Profile"> | number
    present?: BoolFilter<"Profile"> | boolean
    voting?: BoolFilter<"Profile"> | boolean
  }

  export type CommitteeUpsertWithWhereUniqueWithoutUsersInput = {
    where: CommitteeWhereUniqueInput
    update: XOR<CommitteeUpdateWithoutUsersInput, CommitteeUncheckedUpdateWithoutUsersInput>
    create: XOR<CommitteeCreateWithoutUsersInput, CommitteeUncheckedCreateWithoutUsersInput>
  }

  export type CommitteeUpdateWithWhereUniqueWithoutUsersInput = {
    where: CommitteeWhereUniqueInput
    data: XOR<CommitteeUpdateWithoutUsersInput, CommitteeUncheckedUpdateWithoutUsersInput>
  }

  export type CommitteeUpdateManyWithWhereWithoutUsersInput = {
    where: CommitteeScalarWhereInput
    data: XOR<CommitteeUpdateManyMutationInput, CommitteeUncheckedUpdateManyWithoutUsersInput>
  }

  export type CommitteeScalarWhereInput = {
    AND?: CommitteeScalarWhereInput | CommitteeScalarWhereInput[]
    OR?: CommitteeScalarWhereInput[]
    NOT?: CommitteeScalarWhereInput | CommitteeScalarWhereInput[]
    id?: IntFilter<"Committee"> | number
    name?: StringFilter<"Committee"> | string
    topic?: StringNullableFilter<"Committee"> | string | null
    conference?: StringNullableFilter<"Committee"> | string | null
    code?: StringFilter<"Committee"> | string
  }

  export type CountryCreateWithoutCommitteeInput = {
    country: string
    code: string
  }

  export type CountryUncheckedCreateWithoutCommitteeInput = {
    id?: number
    country: string
    code: string
  }

  export type CountryCreateOrConnectWithoutCommitteeInput = {
    where: CountryWhereUniqueInput
    create: XOR<CountryCreateWithoutCommitteeInput, CountryUncheckedCreateWithoutCommitteeInput>
  }

  export type CountryCreateManyCommitteeInputEnvelope = {
    data: CountryCreateManyCommitteeInput | CountryCreateManyCommitteeInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutCommitteesInput = {
    email: string
    password: string
    profiles?: ProfileCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCommitteesInput = {
    id?: number
    email: string
    password: string
    profiles?: ProfileUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCommitteesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCommitteesInput, UserUncheckedCreateWithoutCommitteesInput>
  }

  export type ProfileCreateWithoutCommitteeInput = {
    role?: $Enums.Role
    country?: string | null
    countryCode?: string | null
    workingPaper?: string | null
    timesSpoken?: number
    present?: boolean
    voting?: boolean
    user?: UserCreateNestedOneWithoutProfilesInput
    Motion?: MotionCreateNestedManyWithoutProfileInput
  }

  export type ProfileUncheckedCreateWithoutCommitteeInput = {
    id?: number
    role?: $Enums.Role
    userId?: number | null
    country?: string | null
    countryCode?: string | null
    workingPaper?: string | null
    timesSpoken?: number
    present?: boolean
    voting?: boolean
    Motion?: MotionUncheckedCreateNestedManyWithoutProfileInput
  }

  export type ProfileCreateOrConnectWithoutCommitteeInput = {
    where: ProfileWhereUniqueInput
    create: XOR<ProfileCreateWithoutCommitteeInput, ProfileUncheckedCreateWithoutCommitteeInput>
  }

  export type ProfileCreateManyCommitteeInputEnvelope = {
    data: ProfileCreateManyCommitteeInput | ProfileCreateManyCommitteeInput[]
    skipDuplicates?: boolean
  }

  export type MotionCreateWithoutCommitteeInput = {
    text?: string | null
    code?: string | null
    motionType?: $Enums.MotionType
    time: string
    speakingTime?: string | null
    country?: string | null
    profile?: ProfileCreateNestedOneWithoutMotionInput
  }

  export type MotionUncheckedCreateWithoutCommitteeInput = {
    id?: number
    profileId?: number | null
    text?: string | null
    code?: string | null
    motionType?: $Enums.MotionType
    time: string
    speakingTime?: string | null
    country?: string | null
  }

  export type MotionCreateOrConnectWithoutCommitteeInput = {
    where: MotionWhereUniqueInput
    create: XOR<MotionCreateWithoutCommitteeInput, MotionUncheckedCreateWithoutCommitteeInput>
  }

  export type MotionCreateManyCommitteeInputEnvelope = {
    data: MotionCreateManyCommitteeInput | MotionCreateManyCommitteeInput[]
    skipDuplicates?: boolean
  }

  export type CountryUpsertWithWhereUniqueWithoutCommitteeInput = {
    where: CountryWhereUniqueInput
    update: XOR<CountryUpdateWithoutCommitteeInput, CountryUncheckedUpdateWithoutCommitteeInput>
    create: XOR<CountryCreateWithoutCommitteeInput, CountryUncheckedCreateWithoutCommitteeInput>
  }

  export type CountryUpdateWithWhereUniqueWithoutCommitteeInput = {
    where: CountryWhereUniqueInput
    data: XOR<CountryUpdateWithoutCommitteeInput, CountryUncheckedUpdateWithoutCommitteeInput>
  }

  export type CountryUpdateManyWithWhereWithoutCommitteeInput = {
    where: CountryScalarWhereInput
    data: XOR<CountryUpdateManyMutationInput, CountryUncheckedUpdateManyWithoutCommitteeInput>
  }

  export type CountryScalarWhereInput = {
    AND?: CountryScalarWhereInput | CountryScalarWhereInput[]
    OR?: CountryScalarWhereInput[]
    NOT?: CountryScalarWhereInput | CountryScalarWhereInput[]
    id?: IntFilter<"Country"> | number
    country?: StringFilter<"Country"> | string
    code?: StringFilter<"Country"> | string
    committeeId?: IntNullableFilter<"Country"> | number | null
  }

  export type UserUpsertWithWhereUniqueWithoutCommitteesInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutCommitteesInput, UserUncheckedUpdateWithoutCommitteesInput>
    create: XOR<UserCreateWithoutCommitteesInput, UserUncheckedCreateWithoutCommitteesInput>
  }

  export type UserUpdateWithWhereUniqueWithoutCommitteesInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutCommitteesInput, UserUncheckedUpdateWithoutCommitteesInput>
  }

  export type UserUpdateManyWithWhereWithoutCommitteesInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutCommitteesInput>
  }

  export type UserScalarWhereInput = {
    AND?: UserScalarWhereInput | UserScalarWhereInput[]
    OR?: UserScalarWhereInput[]
    NOT?: UserScalarWhereInput | UserScalarWhereInput[]
    id?: IntFilter<"User"> | number
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
  }

  export type ProfileUpsertWithWhereUniqueWithoutCommitteeInput = {
    where: ProfileWhereUniqueInput
    update: XOR<ProfileUpdateWithoutCommitteeInput, ProfileUncheckedUpdateWithoutCommitteeInput>
    create: XOR<ProfileCreateWithoutCommitteeInput, ProfileUncheckedCreateWithoutCommitteeInput>
  }

  export type ProfileUpdateWithWhereUniqueWithoutCommitteeInput = {
    where: ProfileWhereUniqueInput
    data: XOR<ProfileUpdateWithoutCommitteeInput, ProfileUncheckedUpdateWithoutCommitteeInput>
  }

  export type ProfileUpdateManyWithWhereWithoutCommitteeInput = {
    where: ProfileScalarWhereInput
    data: XOR<ProfileUpdateManyMutationInput, ProfileUncheckedUpdateManyWithoutCommitteeInput>
  }

  export type MotionUpsertWithWhereUniqueWithoutCommitteeInput = {
    where: MotionWhereUniqueInput
    update: XOR<MotionUpdateWithoutCommitteeInput, MotionUncheckedUpdateWithoutCommitteeInput>
    create: XOR<MotionCreateWithoutCommitteeInput, MotionUncheckedCreateWithoutCommitteeInput>
  }

  export type MotionUpdateWithWhereUniqueWithoutCommitteeInput = {
    where: MotionWhereUniqueInput
    data: XOR<MotionUpdateWithoutCommitteeInput, MotionUncheckedUpdateWithoutCommitteeInput>
  }

  export type MotionUpdateManyWithWhereWithoutCommitteeInput = {
    where: MotionScalarWhereInput
    data: XOR<MotionUpdateManyMutationInput, MotionUncheckedUpdateManyWithoutCommitteeInput>
  }

  export type MotionScalarWhereInput = {
    AND?: MotionScalarWhereInput | MotionScalarWhereInput[]
    OR?: MotionScalarWhereInput[]
    NOT?: MotionScalarWhereInput | MotionScalarWhereInput[]
    id?: IntFilter<"Motion"> | number
    profileId?: IntNullableFilter<"Motion"> | number | null
    text?: StringNullableFilter<"Motion"> | string | null
    code?: StringNullableFilter<"Motion"> | string | null
    motionType?: EnumMotionTypeFilter<"Motion"> | $Enums.MotionType
    time?: StringFilter<"Motion"> | string
    speakingTime?: StringNullableFilter<"Motion"> | string | null
    committeeId?: IntFilter<"Motion"> | number
    country?: StringNullableFilter<"Motion"> | string | null
  }

  export type CommitteeCreateWithoutCountriesInput = {
    name: string
    topic?: string | null
    conference?: string | null
    code: string
    users?: UserCreateNestedManyWithoutCommitteesInput
    profiles?: ProfileCreateNestedManyWithoutCommitteeInput
    Motion?: MotionCreateNestedManyWithoutCommitteeInput
  }

  export type CommitteeUncheckedCreateWithoutCountriesInput = {
    id?: number
    name: string
    topic?: string | null
    conference?: string | null
    code: string
    users?: UserUncheckedCreateNestedManyWithoutCommitteesInput
    profiles?: ProfileUncheckedCreateNestedManyWithoutCommitteeInput
    Motion?: MotionUncheckedCreateNestedManyWithoutCommitteeInput
  }

  export type CommitteeCreateOrConnectWithoutCountriesInput = {
    where: CommitteeWhereUniqueInput
    create: XOR<CommitteeCreateWithoutCountriesInput, CommitteeUncheckedCreateWithoutCountriesInput>
  }

  export type CommitteeUpsertWithoutCountriesInput = {
    update: XOR<CommitteeUpdateWithoutCountriesInput, CommitteeUncheckedUpdateWithoutCountriesInput>
    create: XOR<CommitteeCreateWithoutCountriesInput, CommitteeUncheckedCreateWithoutCountriesInput>
    where?: CommitteeWhereInput
  }

  export type CommitteeUpdateToOneWithWhereWithoutCountriesInput = {
    where?: CommitteeWhereInput
    data: XOR<CommitteeUpdateWithoutCountriesInput, CommitteeUncheckedUpdateWithoutCountriesInput>
  }

  export type CommitteeUpdateWithoutCountriesInput = {
    name?: StringFieldUpdateOperationsInput | string
    topic?: NullableStringFieldUpdateOperationsInput | string | null
    conference?: NullableStringFieldUpdateOperationsInput | string | null
    code?: StringFieldUpdateOperationsInput | string
    users?: UserUpdateManyWithoutCommitteesNestedInput
    profiles?: ProfileUpdateManyWithoutCommitteeNestedInput
    Motion?: MotionUpdateManyWithoutCommitteeNestedInput
  }

  export type CommitteeUncheckedUpdateWithoutCountriesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    topic?: NullableStringFieldUpdateOperationsInput | string | null
    conference?: NullableStringFieldUpdateOperationsInput | string | null
    code?: StringFieldUpdateOperationsInput | string
    users?: UserUncheckedUpdateManyWithoutCommitteesNestedInput
    profiles?: ProfileUncheckedUpdateManyWithoutCommitteeNestedInput
    Motion?: MotionUncheckedUpdateManyWithoutCommitteeNestedInput
  }

  export type UserCreateWithoutProfilesInput = {
    email: string
    password: string
    committees?: CommitteeCreateNestedManyWithoutUsersInput
  }

  export type UserUncheckedCreateWithoutProfilesInput = {
    id?: number
    email: string
    password: string
    committees?: CommitteeUncheckedCreateNestedManyWithoutUsersInput
  }

  export type UserCreateOrConnectWithoutProfilesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutProfilesInput, UserUncheckedCreateWithoutProfilesInput>
  }

  export type CommitteeCreateWithoutProfilesInput = {
    name: string
    topic?: string | null
    conference?: string | null
    code: string
    countries?: CountryCreateNestedManyWithoutCommitteeInput
    users?: UserCreateNestedManyWithoutCommitteesInput
    Motion?: MotionCreateNestedManyWithoutCommitteeInput
  }

  export type CommitteeUncheckedCreateWithoutProfilesInput = {
    id?: number
    name: string
    topic?: string | null
    conference?: string | null
    code: string
    countries?: CountryUncheckedCreateNestedManyWithoutCommitteeInput
    users?: UserUncheckedCreateNestedManyWithoutCommitteesInput
    Motion?: MotionUncheckedCreateNestedManyWithoutCommitteeInput
  }

  export type CommitteeCreateOrConnectWithoutProfilesInput = {
    where: CommitteeWhereUniqueInput
    create: XOR<CommitteeCreateWithoutProfilesInput, CommitteeUncheckedCreateWithoutProfilesInput>
  }

  export type MotionCreateWithoutProfileInput = {
    text?: string | null
    code?: string | null
    motionType?: $Enums.MotionType
    time: string
    speakingTime?: string | null
    country?: string | null
    committee: CommitteeCreateNestedOneWithoutMotionInput
  }

  export type MotionUncheckedCreateWithoutProfileInput = {
    id?: number
    text?: string | null
    code?: string | null
    motionType?: $Enums.MotionType
    time: string
    speakingTime?: string | null
    committeeId: number
    country?: string | null
  }

  export type MotionCreateOrConnectWithoutProfileInput = {
    where: MotionWhereUniqueInput
    create: XOR<MotionCreateWithoutProfileInput, MotionUncheckedCreateWithoutProfileInput>
  }

  export type MotionCreateManyProfileInputEnvelope = {
    data: MotionCreateManyProfileInput | MotionCreateManyProfileInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutProfilesInput = {
    update: XOR<UserUpdateWithoutProfilesInput, UserUncheckedUpdateWithoutProfilesInput>
    create: XOR<UserCreateWithoutProfilesInput, UserUncheckedCreateWithoutProfilesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutProfilesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutProfilesInput, UserUncheckedUpdateWithoutProfilesInput>
  }

  export type UserUpdateWithoutProfilesInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    committees?: CommitteeUpdateManyWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateWithoutProfilesInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    committees?: CommitteeUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type CommitteeUpsertWithoutProfilesInput = {
    update: XOR<CommitteeUpdateWithoutProfilesInput, CommitteeUncheckedUpdateWithoutProfilesInput>
    create: XOR<CommitteeCreateWithoutProfilesInput, CommitteeUncheckedCreateWithoutProfilesInput>
    where?: CommitteeWhereInput
  }

  export type CommitteeUpdateToOneWithWhereWithoutProfilesInput = {
    where?: CommitteeWhereInput
    data: XOR<CommitteeUpdateWithoutProfilesInput, CommitteeUncheckedUpdateWithoutProfilesInput>
  }

  export type CommitteeUpdateWithoutProfilesInput = {
    name?: StringFieldUpdateOperationsInput | string
    topic?: NullableStringFieldUpdateOperationsInput | string | null
    conference?: NullableStringFieldUpdateOperationsInput | string | null
    code?: StringFieldUpdateOperationsInput | string
    countries?: CountryUpdateManyWithoutCommitteeNestedInput
    users?: UserUpdateManyWithoutCommitteesNestedInput
    Motion?: MotionUpdateManyWithoutCommitteeNestedInput
  }

  export type CommitteeUncheckedUpdateWithoutProfilesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    topic?: NullableStringFieldUpdateOperationsInput | string | null
    conference?: NullableStringFieldUpdateOperationsInput | string | null
    code?: StringFieldUpdateOperationsInput | string
    countries?: CountryUncheckedUpdateManyWithoutCommitteeNestedInput
    users?: UserUncheckedUpdateManyWithoutCommitteesNestedInput
    Motion?: MotionUncheckedUpdateManyWithoutCommitteeNestedInput
  }

  export type MotionUpsertWithWhereUniqueWithoutProfileInput = {
    where: MotionWhereUniqueInput
    update: XOR<MotionUpdateWithoutProfileInput, MotionUncheckedUpdateWithoutProfileInput>
    create: XOR<MotionCreateWithoutProfileInput, MotionUncheckedCreateWithoutProfileInput>
  }

  export type MotionUpdateWithWhereUniqueWithoutProfileInput = {
    where: MotionWhereUniqueInput
    data: XOR<MotionUpdateWithoutProfileInput, MotionUncheckedUpdateWithoutProfileInput>
  }

  export type MotionUpdateManyWithWhereWithoutProfileInput = {
    where: MotionScalarWhereInput
    data: XOR<MotionUpdateManyMutationInput, MotionUncheckedUpdateManyWithoutProfileInput>
  }

  export type ProfileCreateWithoutMotionInput = {
    role?: $Enums.Role
    country?: string | null
    countryCode?: string | null
    workingPaper?: string | null
    timesSpoken?: number
    present?: boolean
    voting?: boolean
    user?: UserCreateNestedOneWithoutProfilesInput
    committee: CommitteeCreateNestedOneWithoutProfilesInput
  }

  export type ProfileUncheckedCreateWithoutMotionInput = {
    id?: number
    role?: $Enums.Role
    userId?: number | null
    country?: string | null
    countryCode?: string | null
    committeeId: number
    workingPaper?: string | null
    timesSpoken?: number
    present?: boolean
    voting?: boolean
  }

  export type ProfileCreateOrConnectWithoutMotionInput = {
    where: ProfileWhereUniqueInput
    create: XOR<ProfileCreateWithoutMotionInput, ProfileUncheckedCreateWithoutMotionInput>
  }

  export type CommitteeCreateWithoutMotionInput = {
    name: string
    topic?: string | null
    conference?: string | null
    code: string
    countries?: CountryCreateNestedManyWithoutCommitteeInput
    users?: UserCreateNestedManyWithoutCommitteesInput
    profiles?: ProfileCreateNestedManyWithoutCommitteeInput
  }

  export type CommitteeUncheckedCreateWithoutMotionInput = {
    id?: number
    name: string
    topic?: string | null
    conference?: string | null
    code: string
    countries?: CountryUncheckedCreateNestedManyWithoutCommitteeInput
    users?: UserUncheckedCreateNestedManyWithoutCommitteesInput
    profiles?: ProfileUncheckedCreateNestedManyWithoutCommitteeInput
  }

  export type CommitteeCreateOrConnectWithoutMotionInput = {
    where: CommitteeWhereUniqueInput
    create: XOR<CommitteeCreateWithoutMotionInput, CommitteeUncheckedCreateWithoutMotionInput>
  }

  export type ProfileUpsertWithoutMotionInput = {
    update: XOR<ProfileUpdateWithoutMotionInput, ProfileUncheckedUpdateWithoutMotionInput>
    create: XOR<ProfileCreateWithoutMotionInput, ProfileUncheckedCreateWithoutMotionInput>
    where?: ProfileWhereInput
  }

  export type ProfileUpdateToOneWithWhereWithoutMotionInput = {
    where?: ProfileWhereInput
    data: XOR<ProfileUpdateWithoutMotionInput, ProfileUncheckedUpdateWithoutMotionInput>
  }

  export type ProfileUpdateWithoutMotionInput = {
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    country?: NullableStringFieldUpdateOperationsInput | string | null
    countryCode?: NullableStringFieldUpdateOperationsInput | string | null
    workingPaper?: NullableStringFieldUpdateOperationsInput | string | null
    timesSpoken?: IntFieldUpdateOperationsInput | number
    present?: BoolFieldUpdateOperationsInput | boolean
    voting?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneWithoutProfilesNestedInput
    committee?: CommitteeUpdateOneRequiredWithoutProfilesNestedInput
  }

  export type ProfileUncheckedUpdateWithoutMotionInput = {
    id?: IntFieldUpdateOperationsInput | number
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    countryCode?: NullableStringFieldUpdateOperationsInput | string | null
    committeeId?: IntFieldUpdateOperationsInput | number
    workingPaper?: NullableStringFieldUpdateOperationsInput | string | null
    timesSpoken?: IntFieldUpdateOperationsInput | number
    present?: BoolFieldUpdateOperationsInput | boolean
    voting?: BoolFieldUpdateOperationsInput | boolean
  }

  export type CommitteeUpsertWithoutMotionInput = {
    update: XOR<CommitteeUpdateWithoutMotionInput, CommitteeUncheckedUpdateWithoutMotionInput>
    create: XOR<CommitteeCreateWithoutMotionInput, CommitteeUncheckedCreateWithoutMotionInput>
    where?: CommitteeWhereInput
  }

  export type CommitteeUpdateToOneWithWhereWithoutMotionInput = {
    where?: CommitteeWhereInput
    data: XOR<CommitteeUpdateWithoutMotionInput, CommitteeUncheckedUpdateWithoutMotionInput>
  }

  export type CommitteeUpdateWithoutMotionInput = {
    name?: StringFieldUpdateOperationsInput | string
    topic?: NullableStringFieldUpdateOperationsInput | string | null
    conference?: NullableStringFieldUpdateOperationsInput | string | null
    code?: StringFieldUpdateOperationsInput | string
    countries?: CountryUpdateManyWithoutCommitteeNestedInput
    users?: UserUpdateManyWithoutCommitteesNestedInput
    profiles?: ProfileUpdateManyWithoutCommitteeNestedInput
  }

  export type CommitteeUncheckedUpdateWithoutMotionInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    topic?: NullableStringFieldUpdateOperationsInput | string | null
    conference?: NullableStringFieldUpdateOperationsInput | string | null
    code?: StringFieldUpdateOperationsInput | string
    countries?: CountryUncheckedUpdateManyWithoutCommitteeNestedInput
    users?: UserUncheckedUpdateManyWithoutCommitteesNestedInput
    profiles?: ProfileUncheckedUpdateManyWithoutCommitteeNestedInput
  }

  export type ProfileCreateManyUserInput = {
    id?: number
    role?: $Enums.Role
    country?: string | null
    countryCode?: string | null
    committeeId: number
    workingPaper?: string | null
    timesSpoken?: number
    present?: boolean
    voting?: boolean
  }

  export type ProfileUpdateWithoutUserInput = {
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    country?: NullableStringFieldUpdateOperationsInput | string | null
    countryCode?: NullableStringFieldUpdateOperationsInput | string | null
    workingPaper?: NullableStringFieldUpdateOperationsInput | string | null
    timesSpoken?: IntFieldUpdateOperationsInput | number
    present?: BoolFieldUpdateOperationsInput | boolean
    voting?: BoolFieldUpdateOperationsInput | boolean
    committee?: CommitteeUpdateOneRequiredWithoutProfilesNestedInput
    Motion?: MotionUpdateManyWithoutProfileNestedInput
  }

  export type ProfileUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    country?: NullableStringFieldUpdateOperationsInput | string | null
    countryCode?: NullableStringFieldUpdateOperationsInput | string | null
    committeeId?: IntFieldUpdateOperationsInput | number
    workingPaper?: NullableStringFieldUpdateOperationsInput | string | null
    timesSpoken?: IntFieldUpdateOperationsInput | number
    present?: BoolFieldUpdateOperationsInput | boolean
    voting?: BoolFieldUpdateOperationsInput | boolean
    Motion?: MotionUncheckedUpdateManyWithoutProfileNestedInput
  }

  export type ProfileUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    country?: NullableStringFieldUpdateOperationsInput | string | null
    countryCode?: NullableStringFieldUpdateOperationsInput | string | null
    committeeId?: IntFieldUpdateOperationsInput | number
    workingPaper?: NullableStringFieldUpdateOperationsInput | string | null
    timesSpoken?: IntFieldUpdateOperationsInput | number
    present?: BoolFieldUpdateOperationsInput | boolean
    voting?: BoolFieldUpdateOperationsInput | boolean
  }

  export type CommitteeUpdateWithoutUsersInput = {
    name?: StringFieldUpdateOperationsInput | string
    topic?: NullableStringFieldUpdateOperationsInput | string | null
    conference?: NullableStringFieldUpdateOperationsInput | string | null
    code?: StringFieldUpdateOperationsInput | string
    countries?: CountryUpdateManyWithoutCommitteeNestedInput
    profiles?: ProfileUpdateManyWithoutCommitteeNestedInput
    Motion?: MotionUpdateManyWithoutCommitteeNestedInput
  }

  export type CommitteeUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    topic?: NullableStringFieldUpdateOperationsInput | string | null
    conference?: NullableStringFieldUpdateOperationsInput | string | null
    code?: StringFieldUpdateOperationsInput | string
    countries?: CountryUncheckedUpdateManyWithoutCommitteeNestedInput
    profiles?: ProfileUncheckedUpdateManyWithoutCommitteeNestedInput
    Motion?: MotionUncheckedUpdateManyWithoutCommitteeNestedInput
  }

  export type CommitteeUncheckedUpdateManyWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    topic?: NullableStringFieldUpdateOperationsInput | string | null
    conference?: NullableStringFieldUpdateOperationsInput | string | null
    code?: StringFieldUpdateOperationsInput | string
  }

  export type CountryCreateManyCommitteeInput = {
    id?: number
    country: string
    code: string
  }

  export type ProfileCreateManyCommitteeInput = {
    id?: number
    role?: $Enums.Role
    userId?: number | null
    country?: string | null
    countryCode?: string | null
    workingPaper?: string | null
    timesSpoken?: number
    present?: boolean
    voting?: boolean
  }

  export type MotionCreateManyCommitteeInput = {
    id?: number
    profileId?: number | null
    text?: string | null
    code?: string | null
    motionType?: $Enums.MotionType
    time: string
    speakingTime?: string | null
    country?: string | null
  }

  export type CountryUpdateWithoutCommitteeInput = {
    country?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
  }

  export type CountryUncheckedUpdateWithoutCommitteeInput = {
    id?: IntFieldUpdateOperationsInput | number
    country?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
  }

  export type CountryUncheckedUpdateManyWithoutCommitteeInput = {
    id?: IntFieldUpdateOperationsInput | number
    country?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
  }

  export type UserUpdateWithoutCommitteesInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profiles?: ProfileUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCommitteesInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profiles?: ProfileUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutCommitteesInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type ProfileUpdateWithoutCommitteeInput = {
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    country?: NullableStringFieldUpdateOperationsInput | string | null
    countryCode?: NullableStringFieldUpdateOperationsInput | string | null
    workingPaper?: NullableStringFieldUpdateOperationsInput | string | null
    timesSpoken?: IntFieldUpdateOperationsInput | number
    present?: BoolFieldUpdateOperationsInput | boolean
    voting?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneWithoutProfilesNestedInput
    Motion?: MotionUpdateManyWithoutProfileNestedInput
  }

  export type ProfileUncheckedUpdateWithoutCommitteeInput = {
    id?: IntFieldUpdateOperationsInput | number
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    countryCode?: NullableStringFieldUpdateOperationsInput | string | null
    workingPaper?: NullableStringFieldUpdateOperationsInput | string | null
    timesSpoken?: IntFieldUpdateOperationsInput | number
    present?: BoolFieldUpdateOperationsInput | boolean
    voting?: BoolFieldUpdateOperationsInput | boolean
    Motion?: MotionUncheckedUpdateManyWithoutProfileNestedInput
  }

  export type ProfileUncheckedUpdateManyWithoutCommitteeInput = {
    id?: IntFieldUpdateOperationsInput | number
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    countryCode?: NullableStringFieldUpdateOperationsInput | string | null
    workingPaper?: NullableStringFieldUpdateOperationsInput | string | null
    timesSpoken?: IntFieldUpdateOperationsInput | number
    present?: BoolFieldUpdateOperationsInput | boolean
    voting?: BoolFieldUpdateOperationsInput | boolean
  }

  export type MotionUpdateWithoutCommitteeInput = {
    text?: NullableStringFieldUpdateOperationsInput | string | null
    code?: NullableStringFieldUpdateOperationsInput | string | null
    motionType?: EnumMotionTypeFieldUpdateOperationsInput | $Enums.MotionType
    time?: StringFieldUpdateOperationsInput | string
    speakingTime?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: ProfileUpdateOneWithoutMotionNestedInput
  }

  export type MotionUncheckedUpdateWithoutCommitteeInput = {
    id?: IntFieldUpdateOperationsInput | number
    profileId?: NullableIntFieldUpdateOperationsInput | number | null
    text?: NullableStringFieldUpdateOperationsInput | string | null
    code?: NullableStringFieldUpdateOperationsInput | string | null
    motionType?: EnumMotionTypeFieldUpdateOperationsInput | $Enums.MotionType
    time?: StringFieldUpdateOperationsInput | string
    speakingTime?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MotionUncheckedUpdateManyWithoutCommitteeInput = {
    id?: IntFieldUpdateOperationsInput | number
    profileId?: NullableIntFieldUpdateOperationsInput | number | null
    text?: NullableStringFieldUpdateOperationsInput | string | null
    code?: NullableStringFieldUpdateOperationsInput | string | null
    motionType?: EnumMotionTypeFieldUpdateOperationsInput | $Enums.MotionType
    time?: StringFieldUpdateOperationsInput | string
    speakingTime?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MotionCreateManyProfileInput = {
    id?: number
    text?: string | null
    code?: string | null
    motionType?: $Enums.MotionType
    time: string
    speakingTime?: string | null
    committeeId: number
    country?: string | null
  }

  export type MotionUpdateWithoutProfileInput = {
    text?: NullableStringFieldUpdateOperationsInput | string | null
    code?: NullableStringFieldUpdateOperationsInput | string | null
    motionType?: EnumMotionTypeFieldUpdateOperationsInput | $Enums.MotionType
    time?: StringFieldUpdateOperationsInput | string
    speakingTime?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    committee?: CommitteeUpdateOneRequiredWithoutMotionNestedInput
  }

  export type MotionUncheckedUpdateWithoutProfileInput = {
    id?: IntFieldUpdateOperationsInput | number
    text?: NullableStringFieldUpdateOperationsInput | string | null
    code?: NullableStringFieldUpdateOperationsInput | string | null
    motionType?: EnumMotionTypeFieldUpdateOperationsInput | $Enums.MotionType
    time?: StringFieldUpdateOperationsInput | string
    speakingTime?: NullableStringFieldUpdateOperationsInput | string | null
    committeeId?: IntFieldUpdateOperationsInput | number
    country?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MotionUncheckedUpdateManyWithoutProfileInput = {
    id?: IntFieldUpdateOperationsInput | number
    text?: NullableStringFieldUpdateOperationsInput | string | null
    code?: NullableStringFieldUpdateOperationsInput | string | null
    motionType?: EnumMotionTypeFieldUpdateOperationsInput | $Enums.MotionType
    time?: StringFieldUpdateOperationsInput | string
    speakingTime?: NullableStringFieldUpdateOperationsInput | string | null
    committeeId?: IntFieldUpdateOperationsInput | number
    country?: NullableStringFieldUpdateOperationsInput | string | null
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CommitteeCountOutputTypeDefaultArgs instead
     */
    export type CommitteeCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CommitteeCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProfileCountOutputTypeDefaultArgs instead
     */
    export type ProfileCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProfileCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CommitteeDefaultArgs instead
     */
    export type CommitteeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CommitteeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CountryDefaultArgs instead
     */
    export type CountryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CountryDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProfileDefaultArgs instead
     */
    export type ProfileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProfileDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MotionDefaultArgs instead
     */
    export type MotionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MotionDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}